{
  "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapperAdder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapperSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategyModifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllowanceShouldBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmountOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwapper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAsyncSwapper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSyncSwapper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapperInUse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroSlippage",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "AsyncTradeExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_receivedAmount",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "MultipleAsyncTradeExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "SyncTradeExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAPPER_ADDER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAPPER_SETTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "__swappers",
          "type": "address[]"
        }
      ],
      "name": "addSwappers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "disableByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "enable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabledTrades",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ITradeFactoryPositionsHandler.EnabledTrade[]",
          "name": "_enabledTrades",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minAmountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITradeFactoryExecutor.AsyncTradeExecutionDetails",
          "name": "_tradeExecutionDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxSlippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITradeFactoryExecutor.SyncTradeExecutionDetails",
          "name": "_tradeExecutionDetails",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minAmountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITradeFactoryExecutor.AsyncTradeExecutionDetails[]",
          "name": "_tradesExecutionDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanic",
          "type": "address"
        }
      ],
      "name": "isMechanic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isMechanic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "isSwapper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isSwapper",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mechanicsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "_mechanicRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "__swappers",
          "type": "address[]"
        }
      ],
      "name": "removeSwappers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__mechanicsRegistry",
          "type": "address"
        }
      ],
      "name": "setMechanicsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "setStrategySyncSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategySyncSwapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "swapperStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swappers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_swappersList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
  "receipt": {
    "to": null,
    "from": "0x0000000031669Ab4083265E0850030fa8dEc8daf",
    "contractAddress": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
    "transactionIndex": 176,
    "gasUsed": "3005031",
    "logsBloom": "0x
    "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80",
    "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
    "logs": [
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3"
        ],
        "data": "0x",
        "logIndex": 291,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3",
          "0x0000000000000000000000002c01b4ad51a67e2d8f02208f54df9ac4c0b778b6",
          "0x0000000000000000000000000000000031669ab4083265e0850030fa8dec8daf"
        ],
        "data": "0x",
        "logIndex": 292,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd9",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3"
        ],
        "data": "0x",
        "logIndex": 293,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b911",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3"
        ],
        "data": "0x",
        "logIndex": 294,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd9",
          "0x0000000000000000000000002c01b4ad51a67e2d8f02208f54df9ac4c0b778b6",
          "0x0000000000000000000000000000000031669ab4083265e0850030fa8dec8daf"
        ],
        "data": "0x",
        "logIndex": 295,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b911",
          "0x0000000000000000000000002c01b4ad51a67e2d8f02208f54df9ac4c0b778b6",
          "0x0000000000000000000000000000000031669ab4083265e0850030fa8dec8daf"
        ],
        "data": "0x",
        "logIndex": 296,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae"
        ],
        "data": "0x",
        "logIndex": 297,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3"
        ],
        "data": "0x",
        "logIndex": 298,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      },
      {
        "transactionIndex": 176,
        "blockNumber": 14162273,
        "transactionHash": "0x2d43f593cc59e2efbfb3b083e05f932060ec88f306d3870614c1a8f93058e698",
        "address": "0x7A17E008c1caF7a937766fAb1C29AeDc0bF3472c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae",
          "0x0000000000000000000000002c01b4ad51a67e2d8f02208f54df9ac4c0b778b6",
          "0x0000000000000000000000000000000031669ab4083265e0850030fa8dec8daf"
        ],
        "data": "0x",
        "logIndex": 299,
        "blockHash": "0x6b7b0852c522fb46d57c1ec1c131645e208d1c7f709dbefc6f2d0a74d7476f80"
      }
    ],
    "blockNumber": 14162273,
    "cumulativeGasUsed": "16462311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2C01B4AD51a67E2d8F02208F54dF9aC4c0B778B6",
    "0x2C01B4AD51a67E2d8F02208F54dF9aC4c0B778B6",
    "0x2C01B4AD51a67E2d8F02208F54dF9aC4c0B778B6",
    "0x2C01B4AD51a67E2d8F02208F54dF9aC4c0B778B6",
    "0xe8d5a85758fe98f7dce251cad552691d49b499bb"
  ],
  "solcInputHash": "3004885315de5ae00fa7c68fd6fb4fa6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapperAdder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapperSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyModifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowanceShouldBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAsyncSwapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSyncSwapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapperInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSlippage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"AsyncTradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_receivedAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"MultipleAsyncTradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"SyncTradeExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAPPER_ADDER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAPPER_SETTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"__swappers\",\"type\":\"address[]\"}],\"name\":\"addSwappers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"disableByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabledTrades\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ITradeFactoryPositionsHandler.EnabledTrade[]\",\"name\":\"_enabledTrades\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct ITradeFactoryExecutor.AsyncTradeExecutionDetails\",\"name\":\"_tradeExecutionDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct ITradeFactoryExecutor.SyncTradeExecutionDetails\",\"name\":\"_tradeExecutionDetails\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct ITradeFactoryExecutor.AsyncTradeExecutionDetails[]\",\"name\":\"_tradesExecutionDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanic\",\"type\":\"address\"}],\"name\":\"isMechanic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMechanic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"isSwapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isSwapper\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mechanicsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"__swappers\",\"type\":\"address[]\"}],\"name\":\"removeSwappers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__mechanicsRegistry\",\"type\":\"address\"}],\"name\":\"setMechanicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"setStrategySyncSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategySyncSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"swapperStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_swappersList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradeFactory/TradeFactory.sol\":\"TradeFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/mechanics/IMechanicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IMechanicsRegistry {\\n  event MechanicAdded(address _mechanic);\\n  event MechanicRemoved(address _mechanic);\\n\\n  function addMechanic(address _mechanic) external;\\n\\n  function removeMechanic(address _mechanic) external;\\n\\n  function mechanics() external view returns (address[] memory _mechanicsList);\\n\\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n}\\n\",\"keccak256\":\"0xea99a72ea91a0948f7aa3cee28a68848da56f9d3027aaa40ae37eb5e3046e0fd\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/ICollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0b1bb0c71f8adb4466b264d4bde216afb9abe3f17e504cd544a8c378f6a5cab8\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  function acceptGovernor() external;\\n\\n  function governor() external view returns (address _governor);\\n\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n}\\n\",\"keccak256\":\"0xf73672943bc49e4b24ef05e08173ce64ee2dbac48558a330fc836e707035893d\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/IMachinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IMachinery {\\n  // View helpers\\n  function mechanicsRegistry() external view returns (address _mechanicsRegistry);\\n\\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n  // Setters\\n  function setMechanicsRegistry(address _mechanicsRegistry) external;\\n}\\n\",\"keccak256\":\"0xdf1def1edf0114646cbb16bd56448a1317fc1f4616b121ab5d69d92b725a08ca\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/CollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/utils/ICollectableDust.sol';\\n\\nabstract contract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x54bfb72dbb983714f5e5273d5a0965409bb7ad370e387a4abb8cf753028e74c8\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/utils/IGovernable.sol';\\n\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external virtual override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == governor;\\n  }\\n\\n  modifier onlyGovernor() {\\n    require(isGovernor(msg.sender), 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x67c9115239b7816bacb5a0efd34b44f0e19d973ddc2ba82c51457d1c3675ba2c\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/Machinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '../interfaces/utils/IMachinery.sol';\\nimport '../interfaces/mechanics/IMechanicsRegistry.sol';\\n\\ncontract Machinery is IMachinery {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IMechanicsRegistry internal _mechanicsRegistry;\\n\\n  constructor(address __mechanicsRegistry) {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  modifier onlyMechanic() {\\n    require(_mechanicsRegistry.isMechanic(msg.sender), 'Machinery: not mechanic');\\n    _;\\n  }\\n\\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  function _setMechanicsRegistry(address __mechanicsRegistry) internal {\\n    _mechanicsRegistry = IMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  // View helpers\\n  function mechanicsRegistry() external view override returns (address _mechanicRegistry) {\\n    return address(_mechanicsRegistry);\\n  }\\n\\n  function isMechanic(address _mechanic) public view override returns (bool _isMechanic) {\\n    return _mechanicsRegistry.isMechanic(_mechanic);\\n  }\\n}\\n\",\"keccak256\":\"0xfccb336a8d75b6e47683c11ea48394021bb1b37762ec62f31eb208bda64550f3\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@yearn/contract-utils/contracts/utils/CollectableDust.sol';\\n\\nimport './TradeFactoryPositionsHandler.sol';\\nimport './TradeFactoryExecutor.sol';\\n\\ninterface ITradeFactory is ITradeFactoryExecutor, ITradeFactoryPositionsHandler {}\\n\\ncontract TradeFactory is TradeFactoryExecutor, CollectableDust, ITradeFactory {\\n  constructor(\\n    address _masterAdmin,\\n    address _swapperAdder,\\n    address _swapperSetter,\\n    address _strategyModifier,\\n    address _mechanicsRegistry\\n  )\\n    TradeFactoryAccessManager(_masterAdmin)\\n    TradeFactoryPositionsHandler(_strategyModifier)\\n    TradeFactorySwapperHandler(_swapperAdder, _swapperSetter)\\n    TradeFactoryExecutor(_mechanicsRegistry)\\n  {}\\n\\n  // Collectable Dust\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyRole(MASTER_ADMIN) {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x55ff676fc7452cea1eece69f62b095cc38d077f2f0196e0f5f058d5ad32b51b4\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactoryAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\n\\nimport '../libraries/CommonErrors.sol';\\n\\nabstract contract TradeFactoryAccessManager is AccessControl {\\n  bytes32 public constant MASTER_ADMIN = keccak256('MASTER_ADMIN');\\n\\n  constructor(address _masterAdmin) {\\n    if (_masterAdmin == address(0)) revert CommonErrors.ZeroAddress();\\n    _setRoleAdmin(MASTER_ADMIN, MASTER_ADMIN);\\n    _setupRole(MASTER_ADMIN, _masterAdmin);\\n  }\\n}\\n\",\"keccak256\":\"0x34761ece86a466e001258147434828b501846c7ea721ba8e8401a88b797bfe81\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactoryExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@yearn/contract-utils/contracts/utils/Machinery.sol';\\n\\nimport '../swappers/async/AsyncSwapper.sol';\\nimport '../swappers/async/MultipleAsyncSwapper.sol';\\nimport '../swappers/sync/SyncSwapper.sol';\\n\\nimport './TradeFactoryPositionsHandler.sol';\\n\\ninterface ITradeFactoryExecutor {\\n  event SyncTradeExecuted(address indexed _strategy, uint256 _receivedAmount, address indexed _swapper);\\n\\n  event AsyncTradeExecuted(uint256 _receivedAmount, address _swapper);\\n\\n  event MultipleAsyncTradeExecuted(uint256[] _receivedAmount, address _swapper);\\n\\n  error InvalidAmountOut();\\n\\n  struct SyncTradeExecutionDetails {\\n    address _tokenIn;\\n    address _tokenOut;\\n    uint256 _amountIn;\\n    uint256 _maxSlippage;\\n  }\\n\\n  struct AsyncTradeExecutionDetails {\\n    address _strategy;\\n    address _tokenIn;\\n    address _tokenOut;\\n    uint256 _amount;\\n    uint256 _minAmountOut;\\n  }\\n\\n  // Sync execution\\n  function execute(SyncTradeExecutionDetails calldata _tradeExecutionDetails, bytes calldata _data) external returns (uint256 _receivedAmount);\\n\\n  // Async execution\\n  function execute(\\n    AsyncTradeExecutionDetails calldata _tradeExecutionDetails,\\n    address _swapper,\\n    bytes calldata _data\\n  ) external returns (uint256 _receivedAmount);\\n\\n  // Multiple async execution\\n  function execute(\\n    AsyncTradeExecutionDetails[] calldata _tradesExecutionDetails,\\n    address _swapper,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\nabstract contract TradeFactoryExecutor is ITradeFactoryExecutor, TradeFactoryPositionsHandler, Machinery {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  constructor(address _mechanicsRegistry) Machinery(_mechanicsRegistry) {}\\n\\n  // Machinery\\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override onlyRole(MASTER_ADMIN) {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  // Execute via sync swapper\\n  function execute(SyncTradeExecutionDetails calldata _tradeExecutionDetails, bytes calldata _data)\\n    external\\n    override\\n    onlyRole(STRATEGY)\\n    returns (uint256 _receivedAmount)\\n  {\\n    address _swapper = strategySyncSwapper[msg.sender];\\n    if (_tradeExecutionDetails._tokenIn == address(0) || _tradeExecutionDetails._tokenOut == address(0)) revert CommonErrors.ZeroAddress();\\n    if (_tradeExecutionDetails._amountIn == 0) revert CommonErrors.ZeroAmount();\\n    if (_tradeExecutionDetails._maxSlippage == 0) revert CommonErrors.ZeroSlippage();\\n    IERC20(_tradeExecutionDetails._tokenIn).safeTransferFrom(msg.sender, _swapper, _tradeExecutionDetails._amountIn);\\n    uint256 _preSwapBalanceOut = IERC20(_tradeExecutionDetails._tokenOut).balanceOf(msg.sender);\\n    ISyncSwapper(_swapper).swap(\\n      msg.sender,\\n      _tradeExecutionDetails._tokenIn,\\n      _tradeExecutionDetails._tokenOut,\\n      _tradeExecutionDetails._amountIn,\\n      _tradeExecutionDetails._maxSlippage,\\n      _data\\n    );\\n    _receivedAmount = IERC20(_tradeExecutionDetails._tokenOut).balanceOf(msg.sender) - _preSwapBalanceOut;\\n    emit SyncTradeExecuted(msg.sender, _receivedAmount, _swapper);\\n  }\\n\\n  // Execute via async swapper\\n  function execute(\\n    AsyncTradeExecutionDetails calldata _tradeExecutionDetails,\\n    address _swapper,\\n    bytes calldata _data\\n  ) external override onlyMechanic returns (uint256 _receivedAmount) {\\n    if (\\n      !_tokensOutByStrategyAndTokenIn[_tradeExecutionDetails._strategy][_tradeExecutionDetails._tokenIn].contains(\\n        _tradeExecutionDetails._tokenOut\\n      )\\n    ) revert InvalidTrade();\\n    if (!_swappers.contains(_swapper)) revert InvalidSwapper();\\n    uint256 _amount = _tradeExecutionDetails._amount != 0\\n      ? _tradeExecutionDetails._amount\\n      : IERC20(_tradeExecutionDetails._tokenIn).balanceOf(_tradeExecutionDetails._strategy);\\n    IERC20(_tradeExecutionDetails._tokenIn).safeTransferFrom(_tradeExecutionDetails._strategy, _swapper, _amount);\\n    uint256 _preSwapBalanceOut = IERC20(_tradeExecutionDetails._tokenOut).balanceOf(_tradeExecutionDetails._strategy);\\n    IAsyncSwapper(_swapper).swap(\\n      _tradeExecutionDetails._strategy,\\n      _tradeExecutionDetails._tokenIn,\\n      _tradeExecutionDetails._tokenOut,\\n      _amount,\\n      _tradeExecutionDetails._minAmountOut,\\n      _data\\n    );\\n    _receivedAmount = IERC20(_tradeExecutionDetails._tokenOut).balanceOf(_tradeExecutionDetails._strategy) - _preSwapBalanceOut;\\n    if (_receivedAmount < _tradeExecutionDetails._minAmountOut) revert InvalidAmountOut();\\n    emit AsyncTradeExecuted(_receivedAmount, _swapper);\\n  }\\n\\n  function execute(\\n    AsyncTradeExecutionDetails[] calldata _tradesExecutionDetails,\\n    address _swapper,\\n    bytes calldata _data\\n  ) external override onlyMechanic {\\n    // Balance out holder will firstly have the pre swap balance out of each strategy\\n    uint256[] memory _balanceOutHolder = new uint256[](_tradesExecutionDetails.length);\\n    if (!_swappers.contains(_swapper)) revert InvalidSwapper();\\n    for (uint256 i; i < _tradesExecutionDetails.length; i++) {\\n      if (\\n        !_tokensOutByStrategyAndTokenIn[_tradesExecutionDetails[i]._strategy][_tradesExecutionDetails[i]._tokenIn].contains(\\n          _tradesExecutionDetails[i]._tokenOut\\n        )\\n      ) revert InvalidTrade();\\n      uint256 _amount = _tradesExecutionDetails[i]._amount != 0\\n        ? _tradesExecutionDetails[i]._amount\\n        : IERC20(_tradesExecutionDetails[i]._tokenIn).balanceOf(_tradesExecutionDetails[i]._strategy);\\n      IERC20(_tradesExecutionDetails[i]._tokenIn).safeTransferFrom(_tradesExecutionDetails[i]._strategy, _swapper, _amount);\\n      _balanceOutHolder[i] = IERC20(_tradesExecutionDetails[i]._tokenOut).balanceOf(_tradesExecutionDetails[i]._strategy);\\n    }\\n    IMultipleAsyncSwapper(_swapper).swapMultiple(_data);\\n    for (uint256 i; i < _tradesExecutionDetails.length; i++) {\\n      // Balance out holder will now store the total received amount of token out per strat\\n      _balanceOutHolder[i] = IERC20(_tradesExecutionDetails[i]._tokenOut).balanceOf(_tradesExecutionDetails[i]._strategy) - _balanceOutHolder[i];\\n      if (_tradesExecutionDetails[i]._minAmountOut < _balanceOutHolder[i]) revert InvalidAmountOut();\\n    }\\n    emit MultipleAsyncTradeExecuted(_balanceOutHolder, _swapper);\\n  }\\n}\\n\",\"keccak256\":\"0x867a96f789aa0ffdc853f32a01c3cd1efbf747892900803225ba61b3d5555fc3\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactoryPositionsHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport './TradeFactorySwapperHandler.sol';\\n\\nimport {ISwapperEnabled} from '../utils/ISwapperEnabled.sol';\\n\\ninterface ITradeFactoryPositionsHandler {\\n  struct EnabledTrade {\\n    address _strategy;\\n    address _tokenIn;\\n    address _tokenOut;\\n  }\\n\\n  error InvalidTrade();\\n\\n  error AllowanceShouldBeZero();\\n\\n  function enabledTrades() external view returns (EnabledTrade[] memory _enabledTrades);\\n\\n  function enable(address _tokenIn, address _tokenOut) external;\\n\\n  function disable(address _tokenIn, address _tokenOut) external;\\n\\n  function disableByAdmin(\\n    address _strategy,\\n    address _tokenIn,\\n    address _tokenOut\\n  ) external;\\n}\\n\\nabstract contract TradeFactoryPositionsHandler is ITradeFactoryPositionsHandler, TradeFactorySwapperHandler {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  bytes32 public constant STRATEGY = keccak256('STRATEGY');\\n  bytes32 public constant STRATEGY_MANAGER = keccak256('STRATEGY_MANAGER');\\n\\n  EnumerableSet.AddressSet internal _strategies;\\n\\n  // strategy -> tokenIn[]\\n  mapping(address => EnumerableSet.AddressSet) internal _tokensInByStrategy;\\n\\n  // strategy -> tokenIn -> tokenOut[]\\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal _tokensOutByStrategyAndTokenIn;\\n\\n  constructor(address _strategyModifier) {\\n    if (_strategyModifier == address(0)) revert CommonErrors.ZeroAddress();\\n    _setRoleAdmin(STRATEGY, STRATEGY_MANAGER);\\n    _setRoleAdmin(STRATEGY_MANAGER, MASTER_ADMIN);\\n    _setupRole(STRATEGY_MANAGER, _strategyModifier);\\n  }\\n\\n  function enabledTrades() external view override returns (EnabledTrade[] memory _enabledTrades) {\\n    uint256 _totalEnabledTrades;\\n    for (uint256 i; i < _strategies.values().length; i++) {\\n      address _strategy = _strategies.at(i);\\n      address[] memory _tokensIn = _tokensInByStrategy[_strategy].values();\\n      for (uint256 j; j < _tokensIn.length; j++) {\\n        address _tokenIn = _tokensIn[j];\\n        _totalEnabledTrades += _tokensOutByStrategyAndTokenIn[_strategy][_tokenIn].length();\\n      }\\n    }\\n    _enabledTrades = new EnabledTrade[](_totalEnabledTrades);\\n    uint256 _enabledTradesIndex;\\n    for (uint256 i; i < _strategies.values().length; i++) {\\n      address _strategy = _strategies.at(i);\\n      address[] memory _tokensIn = _tokensInByStrategy[_strategy].values();\\n      for (uint256 j; j < _tokensIn.length; j++) {\\n        address _tokenIn = _tokensIn[j];\\n        address[] memory _tokensOut = _tokensOutByStrategyAndTokenIn[_strategy][_tokenIn].values();\\n        for (uint256 k; k < _tokensOut.length; k++) {\\n          _enabledTrades[_enabledTradesIndex] = EnabledTrade(_strategy, _tokenIn, _tokensOut[k]);\\n          _enabledTradesIndex++;\\n        }\\n      }\\n    }\\n  }\\n\\n  function enable(address _tokenIn, address _tokenOut) external override onlyRole(STRATEGY) {\\n    if (_tokenIn == address(0) || _tokenOut == address(0)) revert CommonErrors.ZeroAddress();\\n    _strategies.add(msg.sender);\\n    _tokensInByStrategy[msg.sender].add(_tokenIn);\\n    if (!_tokensOutByStrategyAndTokenIn[msg.sender][_tokenIn].add(_tokenOut)) revert InvalidTrade();\\n  }\\n\\n  function disable(address _tokenIn, address _tokenOut) external override onlyRole(STRATEGY) {\\n    _disable(msg.sender, _tokenIn, _tokenOut);\\n  }\\n\\n  function disableByAdmin(\\n    address _strategy,\\n    address _tokenIn,\\n    address _tokenOut\\n  ) external override onlyRole(STRATEGY_MANAGER) {\\n    // strategy.disableTradeCallback() -> tradeFactory.disable()\\n    ISwapperEnabled(_strategy).disableTradeCallback(_tokenIn, _tokenOut);\\n  }\\n\\n  function _disable(\\n    address _strategy,\\n    address _tokenIn,\\n    address _tokenOut\\n  ) internal {\\n    if (_tokenIn == address(0) || _tokenOut == address(0)) revert CommonErrors.ZeroAddress();\\n    if (IERC20(_tokenIn).allowance(msg.sender, address(this)) != 0) revert AllowanceShouldBeZero();\\n    if (!_tokensOutByStrategyAndTokenIn[_strategy][_tokenIn].remove(_tokenOut)) revert InvalidTrade();\\n    if (_tokensOutByStrategyAndTokenIn[_strategy][_tokenIn].length() == 0) {\\n      _tokensInByStrategy[_strategy].remove(_tokenIn);\\n      if (_tokensInByStrategy[_strategy].length() == 0) {\\n        _strategies.remove(_strategy);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2ab6e29523844b45494a3f39c950a42f366bb2d33d7b64a6a7b9a8c3a254b519\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactorySwapperHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '../swappers/Swapper.sol';\\n\\nimport './TradeFactoryAccessManager.sol';\\n\\ninterface ITradeFactorySwapperHandler {\\n  error NotAsyncSwapper();\\n  error NotSyncSwapper();\\n  error InvalidSwapper();\\n  error SwapperInUse();\\n\\n  function strategySyncSwapper(address _strategy) external view returns (address _swapper);\\n\\n  function swappers() external view returns (address[] memory _swappersList);\\n\\n  function isSwapper(address _swapper) external view returns (bool _isSwapper);\\n\\n  function swapperStrategies(address _swapper) external view returns (address[] memory _strategies);\\n\\n  function setStrategySyncSwapper(address _strategy, address _swapper) external;\\n\\n  function addSwappers(address[] memory __swappers) external;\\n\\n  function removeSwappers(address[] memory __swappers) external;\\n}\\n\\nabstract contract TradeFactorySwapperHandler is ITradeFactorySwapperHandler, TradeFactoryAccessManager {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  bytes32 public constant SWAPPER_ADDER = keccak256('SWAPPER_ADDER');\\n  bytes32 public constant SWAPPER_SETTER = keccak256('SWAPPER_SETTER');\\n\\n  // swappers list\\n  EnumerableSet.AddressSet internal _swappers;\\n  // swapper -> strategy list (useful to know if we can safely deprecate a swapper)\\n  mapping(address => EnumerableSet.AddressSet) internal _swapperStrategies;\\n  // strategy -> sync swapper\\n  mapping(address => address) public override strategySyncSwapper;\\n\\n  constructor(address _swapperAdder, address _swapperSetter) {\\n    if (_swapperAdder == address(0) || _swapperSetter == address(0)) revert CommonErrors.ZeroAddress();\\n    _setRoleAdmin(SWAPPER_ADDER, MASTER_ADMIN);\\n    _setRoleAdmin(SWAPPER_SETTER, MASTER_ADMIN);\\n    _setupRole(SWAPPER_ADDER, _swapperAdder);\\n    _setupRole(SWAPPER_SETTER, _swapperSetter);\\n  }\\n\\n  function isSwapper(address _swapper) external view override returns (bool _isSwapper) {\\n    _isSwapper = _swappers.contains(_swapper);\\n  }\\n\\n  function swappers() external view override returns (address[] memory _swappersList) {\\n    _swappersList = _swappers.values();\\n  }\\n\\n  function swapperStrategies(address _swapper) external view override returns (address[] memory _strategies) {\\n    _strategies = _swapperStrategies[_swapper].values();\\n  }\\n\\n  function setStrategySyncSwapper(address _strategy, address _swapper) external override onlyRole(SWAPPER_SETTER) {\\n    if (_strategy == address(0) || _swapper == address(0)) revert CommonErrors.ZeroAddress();\\n    // we check that swapper being added is async\\n    if (ISwapper(_swapper).SWAPPER_TYPE() != ISwapper.SwapperType.SYNC) revert NotSyncSwapper();\\n    // we check that swapper is not already added\\n    if (!_swappers.contains(_swapper)) revert InvalidSwapper();\\n    // remove strategy from previous swapper if any\\n    if (strategySyncSwapper[_strategy] != address(0)) _swapperStrategies[strategySyncSwapper[_strategy]].remove(_strategy);\\n    // set new strategy's sync swapper\\n    strategySyncSwapper[_strategy] = _swapper;\\n    // add strategy into new swapper\\n    _swapperStrategies[_swapper].add(_strategy);\\n  }\\n\\n  function addSwappers(address[] memory __swappers) external override onlyRole(SWAPPER_ADDER) {\\n    for (uint256 i; i < __swappers.length; i++) {\\n      if (__swappers[i] == address(0)) revert CommonErrors.ZeroAddress();\\n      _swappers.add(__swappers[i]);\\n    }\\n  }\\n\\n  function removeSwappers(address[] memory __swappers) external override onlyRole(SWAPPER_ADDER) {\\n    for (uint256 i; i < __swappers.length; i++) {\\n      if (_swapperStrategies[__swappers[i]].length() > 0) revert SwapperInUse();\\n      _swappers.remove(__swappers[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x729be3cfb147418c937bf98e169d42586b0907586faea99c1525f99f6f6ebad4\",\"license\":\"MIT\"},\"contracts/libraries/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nlibrary CommonErrors {\\n  error ZeroAddress();\\n  error NotAuthorized();\\n  error ZeroAmount();\\n  error ZeroSlippage();\\n  error IncorrectSwapInformation();\\n}\\n\",\"keccak256\":\"0xe2171a8953429c2aabd489384f45fac651cbd08f6dd907cb06460a8fb3aecd1b\",\"license\":\"MIT\"},\"contracts/swappers/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '@yearn/contract-utils/contracts/utils/Governable.sol';\\nimport '@yearn/contract-utils/contracts/utils/CollectableDust.sol';\\n\\nimport '../libraries/CommonErrors.sol';\\n\\ninterface ISwapper {\\n  enum SwapperType {\\n    ASYNC,\\n    SYNC\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function TRADE_FACTORY() external view returns (address);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function SWAPPER_TYPE() external view returns (SwapperType);\\n}\\n\\nabstract contract Swapper is ISwapper, Governable, CollectableDust {\\n  using SafeERC20 for IERC20;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  address public immutable override TRADE_FACTORY;\\n\\n  constructor(address _tradeFactory) {\\n    if (_tradeFactory == address(0)) revert CommonErrors.ZeroAddress();\\n    TRADE_FACTORY = _tradeFactory;\\n  }\\n\\n  modifier onlyTradeFactory() {\\n    if (msg.sender != TRADE_FACTORY) revert CommonErrors.NotAuthorized();\\n    _;\\n  }\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x602c9c32cc6157bf5c7190a0c1e48ad0bf82ee98d09736c7f163919ba592d6b2\",\"license\":\"MIT\"},\"contracts/swappers/async/AsyncSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../Swapper.sol';\\n\\ninterface IAsyncSwapper is ISwapper {\\n  function swap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _minAmountOut,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\nabstract contract AsyncSwapper is IAsyncSwapper, Swapper {\\n  // solhint-disable-next-line var-name-mixedcase\\n  SwapperType public constant override SWAPPER_TYPE = SwapperType.ASYNC;\\n\\n  constructor(address _governor, address _tradeFactory) Governable(_governor) Swapper(_tradeFactory) {}\\n\\n  function _assertPreSwap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _minAmountOut\\n  ) internal pure {\\n    if (_receiver == address(0) || _tokenIn == address(0) || _tokenOut == address(0)) revert CommonErrors.ZeroAddress();\\n    if (_amountIn == 0) revert CommonErrors.ZeroAmount();\\n    if (_minAmountOut == 0) revert CommonErrors.ZeroAmount();\\n  }\\n\\n  function _executeSwap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    bytes calldata _data\\n  ) internal virtual;\\n\\n  function swap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _minAmountOut,\\n    bytes calldata _data\\n  ) external virtual override onlyTradeFactory {\\n    _assertPreSwap(_receiver, _tokenIn, _tokenOut, _amountIn, _minAmountOut);\\n    _executeSwap(_receiver, _tokenIn, _tokenOut, _amountIn, _data);\\n  }\\n}\\n\",\"keccak256\":\"0xbd2919911b3fdfc861158d2abee52ddcb7493f479ddd0179dca1fd3193557173\",\"license\":\"MIT\"},\"contracts/swappers/async/MultipleAsyncSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './AsyncSwapper.sol';\\n\\ninterface IMultipleAsyncSwapper is IAsyncSwapper {\\n  function swapMultiple(bytes calldata _data) external;\\n}\\n\\nabstract contract MultipleAsyncSwapper is IMultipleAsyncSwapper, AsyncSwapper {\\n  constructor(address _governor, address _tradeFactory) AsyncSwapper(_governor, _tradeFactory) {}\\n}\\n\",\"keccak256\":\"0x943d526bf4d9b0c1e381d49d1275ef07f3cbeed62bbf0e3f55b9a7d53402df6e\",\"license\":\"MIT\"},\"contracts/swappers/sync/SyncSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../Swapper.sol';\\n\\ninterface ISyncSwapper is ISwapper {\\n  // solhint-disable-next-line func-name-mixedcase\\n  function SLIPPAGE_PRECISION() external view returns (uint256);\\n\\n  function swap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\nabstract contract SyncSwapper is ISyncSwapper, Swapper {\\n  // solhint-disable-next-line var-name-mixedcase\\n  uint256 public immutable override SLIPPAGE_PRECISION = 10000; // 1 is 0.0001%, 1_000 is 0.1%\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  SwapperType public constant override SWAPPER_TYPE = SwapperType.SYNC;\\n\\n  constructor(address _governor, address _tradeFactory) Governable(_governor) Swapper(_tradeFactory) {}\\n\\n  function _assertPreSwap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256\\n  ) internal pure {\\n    if (_receiver == address(0) || _tokenIn == address(0) || _tokenOut == address(0)) revert CommonErrors.ZeroAddress();\\n    if (_amountIn == 0) revert CommonErrors.ZeroAmount();\\n  }\\n\\n  function _executeSwap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage,\\n    bytes calldata _data\\n  ) internal virtual;\\n\\n  function swap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage,\\n    bytes calldata _data\\n  ) external virtual override onlyTradeFactory {\\n    _assertPreSwap(_receiver, _tokenIn, _tokenOut, _amountIn, _maxSlippage);\\n    _executeSwap(_receiver, _tokenIn, _tokenOut, _amountIn, _maxSlippage, _data);\\n  }\\n}\\n\",\"keccak256\":\"0x040577c353781563b911d25ecdfc2ff13445e19a3451e0b79e779bb32f251ccb\",\"license\":\"MIT\"},\"contracts/utils/ISwapperEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface ISwapperEnabled {\\n  error NotTradeFactory();\\n\\n  function tradeFactory() external returns (address _tradeFactory);\\n\\n  function swapper() external returns (string memory _swapper);\\n\\n  function setSwapper(string calldata _swapper, bool _migrateSwaps) external;\\n\\n  function setTradeFactory(address _tradeFactory) external;\\n\\n  function enableTrade(address _tokenIn, address _tokenOut) external;\\n\\n  function disableTrade(address _tokenIn, address _tokenOut) external;\\n\\n  function disableTradeCallback(address _tokenIn, address _tokenOut) external;\\n}\\n\",\"keccak256\":\"0xd66649192d826550f73a2887cc52276fdfa204944d921a8555cb234401573e86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034fc380380620034fc83398101604081905262000034916200036d565b8080838686896001600160a01b038116620000625760405163d92e233d60e01b815260040160405180910390fd5b6200007d600080516020620034dc8339815191528062000255565b62000098600080516020620034dc83398151915282620002a0565b506001600160a01b0382161580620000b757506001600160a01b038116155b15620000d65760405163d92e233d60e01b815260040160405180910390fd5b620001006000805160206200349c833981519152600080516020620034dc83398151915262000255565b6200013b7fe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b911600080516020620034dc83398151915262000255565b620001566000805160206200349c83398151915283620002a0565b620001827fe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b91182620002a0565b50506001600160a01b038116620001ac5760405163d92e233d60e01b815260040160405180910390fd5b620001e77f49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7600080516020620034bc83398151915262000255565b62000211600080516020620034bc833981519152600080516020620034dc83398151915262000255565b6200022c600080516020620034bc83398151915282620002a0565b50600980546001600160a01b0319166001600160a01b03831617905550505050505050620003dd565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620002ac8282620002b0565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002ac576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200030c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200036857600080fd5b919050565b600080600080600060a086880312156200038657600080fd5b620003918662000350565b9450620003a16020870162000350565b9350620003b16040870162000350565b9250620003c16060870162000350565b9150620003d16080870162000350565b90509295509295909350565b6130af80620003ed6000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c806365834acc1161010f578063b64230ba116100a2578063d547741f11610071578063d547741f14610486578063e454a5ed14610499578063ef47da6d146104c0578063f7bd381f146104d357600080fd5b8063b64230ba1461042f578063bbeee59114610442578063cbf8e6c414610455578063ccf61a411461045d57600080fd5b80639cd38be5116100de5780639cd38be5146103d25780639fc2c476146103e5578063a217fddf1461040c578063a734f06e1461041457600080fd5b806365834acc14610372578063687020d814610385578063907ab008146103ac57806391d14854146103bf57600080fd5b80632db8c129116101875780634c854126116101565780634c854126146103035780634d1dd98f14610316578063504254911461033d5780635163b4771461035d57600080fd5b80632db8c129146102b75780632f2ff15d146102ca57806336568abe146102dd5780634a2c1bab146102f057600080fd5b806311eff09c116101c357806311eff09c1461024b578063185025ef1461026c57806319b44cd914610281578063248a9ca31461029457600080fd5b8062b8ff92146101e957806301ffc9a7146101fe5780631078f38814610226575b600080fd5b6101fc6101f73660046128d2565b6104e6565b005b61021161020c366004612915565b61057a565b60405190151581526020015b60405180910390f35b6009546001600160a01b03165b6040516001600160a01b03909116815260200161021d565b61025e610259366004612988565b6105b1565b60405190815260200161021d565b61025e60008051602061305a83398151915281565b61025e61028f3660046129f1565b610a81565b61025e6102a2366004612a4c565b60009081526020819052604090206001015490565b6101fc6102c5366004612a65565b610d74565b6101fc6102d8366004612aa1565b610db0565b6101fc6102eb366004612aa1565b610ddb565b6101fc6102fe366004612ae3565b610e59565b6101fc610311366004612ba8565b610f1d565b61025e7fe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b91181565b61035061034b366004612bd2565b610fe1565b60405161021d9190612bed565b610365611005565b60405161021d9190612c3a565b610211610380366004612bd2565b6112bf565b61025e7f038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd981565b6101fc6103ba366004612ae3565b61133d565b6102116103cd366004612aa1565b61141b565b6101fc6103e0366004612ba8565b611444565b61025e7f1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae81565b61025e600081565b61023373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61021161043d366004612bd2565b611468565b6101fc610450366004612ca2565b611475565b610350611b1f565b61023361046b366004612bd2565b6004602052600090815260409020546001600160a01b031681565b6101fc610494366004612aa1565b611b30565b61025e7f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d381565b6101fc6104ce366004612bd2565b611b56565b6101fc6104e1366004612ba8565b611ba0565b7f1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae6105118133611d65565b60405163abb347a960e01b81526001600160a01b038481166004830152838116602483015285169063abb347a990604401600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b5050505050505050565b60006001600160e01b03198216637965db0b60e01b14806105ab57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600954604051631960d2b360e21b81523360048201526000916001600160a01b0316906365834acc9060240160206040518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190612d54565b6106785760405162461bcd60e51b81526020600482015260176024820152764d616368696e6572793a206e6f74206d656368616e696360481b60448201526064015b60405180910390fd5b6106f061068b6060870160408801612bd2565b6008600061069c60208a018a612bd2565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008860200160208101906106d19190612bd2565b6001600160a01b03168152602081019190915260400160002090611dc9565b61070d5760405163d69b537960e01b815260040160405180910390fd5b610718600185611dc9565b610735576040516364a7bd4d60e11b815260040160405180910390fd5b600060608601356107e7576107506040870160208801612bd2565b6001600160a01b03166370a0823161076b6020890189612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156107aa57600080fd5b505afa1580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e29190612d76565b6107ed565b85606001355b90506108226107ff6020880188612bd2565b868361081160408b0160208c01612bd2565b6001600160a01b0316929190611dee565b60006108346060880160408901612bd2565b6001600160a01b03166370a0823161084f60208a018a612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561088e57600080fd5b505afa1580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190612d76565b90506001600160a01b03861663a5d4096b6108e460208a018a612bd2565b6108f460408b0160208c01612bd2565b61090460608c0160408d01612bd2565b868c608001358b8b6040518863ffffffff1660e01b815260040161092e9796959493929190612db8565b600060405180830381600087803b15801561094857600080fd5b505af115801561095c573d6000803e3d6000fd5b508392506109739150506060890160408a01612bd2565b6001600160a01b03166370a0823161098e60208b018b612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156109cd57600080fd5b505afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612d76565b610a0f9190612e1e565b92508660800135831015610a36576040516309d2d38b60e31b815260040160405180910390fd5b604080518481526001600160a01b03881660208201527feb6edbd932a6290d7ca794a21b27f2da7d46b0f9aa0cde6135ce1d0469ad144e910160405180910390a15050949350505050565b600060008051602061305a833981519152610a9c8133611d65565b3360009081526004602090815260408220546001600160a01b03169190610ac590880188612bd2565b6001600160a01b03161480610af257506000610ae76040880160208901612bd2565b6001600160a01b0316145b15610b105760405163d92e233d60e01b815260040160405180910390fd5b6040860135610b3257604051631f2a200560e01b815260040160405180910390fd5b6060860135610b5457604051635380c59d60e01b815260040160405180910390fd5b610b6b3382604089013561081160208b018b612bd2565b6000610b7d6040880160208901612bd2565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610bbe57600080fd5b505afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190612d76565b90506001600160a01b03821663a5d4096b33610c1560208b018b612bd2565b610c2560408c0160208d01612bd2565b8b604001358c606001358c8c6040518863ffffffff1660e01b8152600401610c539796959493929190612db8565b600060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b50839250610c989150506040890160208a01612bd2565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610cd957600080fd5b505afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190612d76565b610d1b9190612e1e565b9350816001600160a01b0316336001600160a01b03167f77afa6671ccb5a39d59afc769ee32cdfdc0e4d7b9bbc32a0092a27843a74e64486604051610d6291815260200190565b60405180910390a35050509392505050565b7f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3610d9f8133611d65565b610daa848484611e59565b50505050565b600082815260208190526040902060010154610dcc8133611d65565b610dd68383611ffb565b505050565b6001600160a01b0381163314610e4b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161066f565b610e55828261207f565b5050565b7f038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd9610e848133611d65565b60005b8251811015610dd65760006001600160a01b0316838281518110610ead57610ead612e35565b60200260200101516001600160a01b03161415610edd5760405163d92e233d60e01b815260040160405180910390fd5b610f0a838281518110610ef257610ef2612e35565b602002602001015160016120e490919063ffffffff16565b5080610f1581612e4b565b915050610e87565b60008051602061305a833981519152610f368133611d65565b6001600160a01b0383161580610f5357506001600160a01b038216155b15610f715760405163d92e233d60e01b815260040160405180910390fd5b610f7c6005336120e4565b50336000908152600760205260409020610f9690846120e4565b503360009081526008602090815260408083206001600160a01b03871684529091529020610fc490836120e4565b610dd65760405163d69b537960e01b815260040160405180910390fd5b6001600160a01b03811660009081526003602052604090206060906105ab906120f9565b60606000805b61101560056120f9565b518110156110e457600061102a600583612106565b6001600160a01b03811660009081526007602052604081209192509061104f906120f9565b905060005b81518110156110ce57600082828151811061107157611071612e35565b6020908102919091018101516001600160a01b0380871660009081526008845260408082209284168252919093529091209091506110ae90612112565b6110b89087612e66565b95505080806110c690612e4b565b915050611054565b50505080806110dc90612e4b565b91505061100b565b508067ffffffffffffffff8111156110fe576110fe612acd565b60405190808252806020026020018201604052801561114957816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161111c5790505b5091506000805b61115a60056120f9565b518110156112b957600061116f600583612106565b6001600160a01b038116600090815260076020526040812091925090611194906120f9565b905060005b81518110156112a35760008282815181106111b6576111b6612e35565b6020908102919091018101516001600160a01b03808716600090815260088452604080822092841682529190935282209092506111f2906120f9565b905060005b815181101561128d576040518060600160405280876001600160a01b03168152602001846001600160a01b0316815260200183838151811061123b5761123b612e35565b60200260200101516001600160a01b03168152508a898151811061126157611261612e35565b6020026020010181905250878061127790612e4b565b985050808061128590612e4b565b9150506111f7565b505050808061129b90612e4b565b915050611199565b50505080806112b190612e4b565b915050611150565b50505090565b600954604051631960d2b360e21b81526001600160a01b03838116600483015260009216906365834acc9060240160206040518083038186803b15801561130557600080fd5b505afa158015611319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190612d54565b7f038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd96113688133611d65565b60005b8251811015610dd65760006113bc6003600086858151811061138f5761138f612e35565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020612112565b11156113db576040516361c45a0f60e01b815260040160405180910390fd5b6114088382815181106113f0576113f0612e35565b6020026020010151600161211c90919063ffffffff16565b508061141381612e4b565b91505061136b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061305a83398151915261145d8133611d65565b610dd6338484612131565b60006105ab600183611dc9565b600954604051631960d2b360e21b81523360048201526001600160a01b03909116906365834acc9060240160206040518083038186803b1580156114b857600080fd5b505afa1580156114cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f09190612d54565b6115365760405162461bcd60e51b81526020600482015260176024820152764d616368696e6572793a206e6f74206d656368616e696360481b604482015260640161066f565b60008467ffffffffffffffff81111561155157611551612acd565b60405190808252806020026020018201604052801561157a578160200160208202803683370190505b509050611588600185611dc9565b6115a5576040516364a7bd4d60e11b815260040160405180910390fd5b60005b858110156118f1576116558787838181106115c5576115c5612e35565b905060a0020160400160208101906115dd9190612bd2565b600860008a8a868181106115f3576115f3612e35565b61160992602060a0909202019081019150612bd2565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a8681811061163d5761163d612e35565b905060a0020160200160208101906106d19190612bd2565b6116725760405163d69b537960e01b815260040160405180910390fd5b600087878381811061168657611686612e35565b905060a002016060013560001415611774578787838181106116aa576116aa612e35565b905060a0020160200160208101906116c29190612bd2565b6001600160a01b03166370a082318989858181106116e2576116e2612e35565b6116f892602060a0909202019081019150612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173757600080fd5b505afa15801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f9190612d76565b611791565b87878381811061178657611786612e35565b905060a00201606001355b90506117ea8888848181106117a8576117a8612e35565b6117be92602060a0909202019081019150612bd2565b87838b8b878181106117d2576117d2612e35565b905060a0020160200160208101906108119190612bd2565b8787838181106117fc576117fc612e35565b905060a0020160400160208101906118149190612bd2565b6001600160a01b03166370a0823189898581811061183457611834612e35565b61184a92602060a0909202019081019150612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561188957600080fd5b505afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c19190612d76565b8383815181106118d3576118d3612e35565b602090810291909101015250806118e981612e4b565b9150506115a8565b506040516364c3d39f60e01b81526001600160a01b038516906364c3d39f906119209086908690600401612e7e565b600060405180830381600087803b15801561193a57600080fd5b505af115801561194e573d6000803e3d6000fd5b5050505060005b85811015611add5781818151811061196f5761196f612e35565b602002602001015187878381811061198957611989612e35565b905060a0020160400160208101906119a19190612bd2565b6001600160a01b03166370a082318989858181106119c1576119c1612e35565b6119d792602060a0909202019081019150612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a1657600080fd5b505afa158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4e9190612d76565b611a589190612e1e565b828281518110611a6a57611a6a612e35565b602002602001018181525050818181518110611a8857611a88612e35565b6020026020010151878783818110611aa257611aa2612e35565b905060a00201608001351015611acb576040516309d2d38b60e31b815260040160405180910390fd5b80611ad581612e4b565b915050611955565b507f4a8b10eb58b24f8872a8364002b92c533c3a143d3588739819be8eb6b38679658185604051611b0f929190612e92565b60405180910390a1505050505050565b6060611b2b60016120f9565b905090565b600082815260208190526040902060010154611b4c8133611d65565b610dd6838361207f565b7f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3611b818133611d65565b600980546001600160a01b0319166001600160a01b0384161790555050565b7fe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b911611bcb8133611d65565b6001600160a01b0383161580611be857506001600160a01b038216155b15611c065760405163d92e233d60e01b815260040160405180910390fd5b6001826001600160a01b031663cd985af06040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4157600080fd5b505afa158015611c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c799190612efc565b6001811115611c8a57611c8a612ee6565b14611ca857604051634b3d6f3360e11b815260040160405180910390fd5b611cb3600183611dc9565b611cd0576040516364a7bd4d60e11b815260040160405180910390fd5b6001600160a01b038381166000908152600460205260409020541615611d23576001600160a01b0380841660009081526004602090815260408083205490931682526003905220611d21908461211c565b505b6001600160a01b03838116600090815260046020908152604080832080546001600160a01b03191694871694851790559282526003905220610daa90846120e4565b611d6f828261141b565b610e5557611d87816001600160a01b031660146122d8565b611d928360206122d8565b604051602001611da3929190612f49565b60408051601f198184030181529082905262461bcd60e51b825261066f91600401612fbe565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610daa9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612474565b6001600160a01b038316611ec75760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b606482015260840161066f565b611ed2600a83611dc9565b15611f365760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b606482015260840161066f565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f97576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015611f91573d6000803e3d6000fd5b50611fab565b611fab6001600160a01b0383168483612546565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b612005828261141b565b610e55576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561203b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612089828261141b565b15610e55576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611de7836001600160a01b038416612576565b60606000611de7836125c5565b6000611de78383612621565b60006105ab825490565b6000611de7836001600160a01b03841661264b565b6001600160a01b038216158061214e57506001600160a01b038116155b1561216c5760405163d92e233d60e01b815260040160405180910390fd5b604051636eb1769f60e11b81523360048201523060248201526001600160a01b0383169063dd62ed3e9060440160206040518083038186803b1580156121b157600080fd5b505afa1580156121c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e99190612d76565b1561220757604051633c553c4360e11b815260040160405180910390fd5b6001600160a01b038084166000908152600860209081526040808320938616835292905220612236908261211c565b6122535760405163d69b537960e01b815260040160405180910390fd5b6001600160a01b03808416600090815260086020908152604080832093861683529290522061228190612112565b610dd6576001600160a01b03831660009081526007602052604090206122a7908361211c565b506001600160a01b03831660009081526007602052604090206122c990612112565b610dd657610daa60058461211c565b606060006122e7836002612ff1565b6122f2906002612e66565b67ffffffffffffffff81111561230a5761230a612acd565b6040519080825280601f01601f191660200182016040528015612334576020820181803683370190505b509050600360fc1b8160008151811061234f5761234f612e35565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061237e5761237e612e35565b60200101906001600160f81b031916908160001a90535060006123a2846002612ff1565b6123ad906001612e66565b90505b6001811115612425576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123e1576123e1612e35565b1a60f81b8282815181106123f7576123f7612e35565b60200101906001600160f81b031916908160001a90535060049490941c9361241e81613010565b90506123b0565b508315611de75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161066f565b60006124c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661273e9092919063ffffffff16565b805190915015610dd657808060200190518101906124e79190612d54565b610dd65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066f565b6040516001600160a01b038316602482015260448101829052610dd690849063a9059cbb60e01b90606401611e22565b60008181526001830160205260408120546125bd575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ab565b5060006105ab565b60608160000180548060200260200160405190810160405280929190818152602001828054801561261557602002820191906000526020600020905b815481526020019060010190808311612601575b50505050509050919050565b600082600001828154811061263857612638612e35565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561273457600061266f600183612e1e565b855490915060009061268390600190612e1e565b90508181146126e85760008660000182815481106126a3576126a3612e35565b90600052602060002001549050808760000184815481106126c6576126c6612e35565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806126f9576126f9613027565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ab565b60009150506105ab565b606061274d8484600085612755565b949350505050565b6060824710156127b65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066f565b843b6128045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066f565b600080866001600160a01b03168587604051612820919061303d565b60006040518083038185875af1925050503d806000811461285d576040519150601f19603f3d011682016040523d82523d6000602084013e612862565b606091505b509150915061287282828661287d565b979650505050505050565b6060831561288c575081611de7565b82511561289c5782518084602001fd5b8160405162461bcd60e51b815260040161066f9190612fbe565b80356001600160a01b03811681146128cd57600080fd5b919050565b6000806000606084860312156128e757600080fd5b6128f0846128b6565b92506128fe602085016128b6565b915061290c604085016128b6565b90509250925092565b60006020828403121561292757600080fd5b81356001600160e01b031981168114611de757600080fd5b60008083601f84011261295157600080fd5b50813567ffffffffffffffff81111561296957600080fd5b60208301915083602082850101111561298157600080fd5b9250929050565b60008060008084860360e081121561299f57600080fd5b60a08112156129ad57600080fd5b508493506129bd60a086016128b6565b925060c085013567ffffffffffffffff8111156129d957600080fd5b6129e58782880161293f565b95989497509550505050565b600080600083850360a0811215612a0757600080fd5b6080811215612a1557600080fd5b50839250608084013567ffffffffffffffff811115612a3357600080fd5b612a3f8682870161293f565b9497909650939450505050565b600060208284031215612a5e57600080fd5b5035919050565b600080600060608486031215612a7a57600080fd5b612a83846128b6565b9250612a91602085016128b6565b9150604084013590509250925092565b60008060408385031215612ab457600080fd5b82359150612ac4602084016128b6565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612af657600080fd5b823567ffffffffffffffff80821115612b0e57600080fd5b818501915085601f830112612b2257600080fd5b813581811115612b3457612b34612acd565b8060051b604051601f19603f83011681018181108582111715612b5957612b59612acd565b604052918252848201925083810185019188831115612b7757600080fd5b938501935b82851015612b9c57612b8d856128b6565b84529385019392850192612b7c565b98975050505050505050565b60008060408385031215612bbb57600080fd5b612bc4836128b6565b9150612ac4602084016128b6565b600060208284031215612be457600080fd5b611de7826128b6565b6020808252825182820181905260009190848201906040850190845b81811015612c2e5783516001600160a01b031683529284019291840191600101612c09565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612c9557815180516001600160a01b0390811686528782015181168887015290860151168585015260609093019290850190600101612c57565b5091979650505050505050565b600080600080600060608688031215612cba57600080fd5b853567ffffffffffffffff80821115612cd257600080fd5b818801915088601f830112612ce657600080fd5b813581811115612cf557600080fd5b89602060a083028501011115612d0a57600080fd5b60208301975080965050612d20602089016128b6565b94506040880135915080821115612d3657600080fd5b50612d438882890161293f565b969995985093965092949392505050565b600060208284031215612d6657600080fd5b81518015158114611de757600080fd5b600060208284031215612d8857600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905260c060a08201819052600090612dfb9083018486612d8f565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e3057612e30612e08565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612e5f57612e5f612e08565b5060010190565b60008219821115612e7957612e79612e08565b500190565b60208152600061274d602083018486612d8f565b604080825283519082018190526000906020906060840190828701845b82811015612ecb57815184529284019290840190600101612eaf565b5050506001600160a01b039490941692019190915250919050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612f0e57600080fd5b815160028110611de757600080fd5b60005b83811015612f38578181015183820152602001612f20565b83811115610daa5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f81816017850160208801612f1d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fb2816028840160208801612f1d565b01602801949350505050565b6020815260008251806020840152612fdd816040850160208701612f1d565b601f01601f19169190910160400192915050565b600081600019048311821515161561300b5761300b612e08565b500290565b60008161301f5761301f612e08565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000825161304f818460208701612f1d565b919091019291505056fe49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7a26469706673582212205bb3e0307c962d6e570a1af311ee8c1bfb8fcd9209e48ea948b152fb9699b45264736f6c63430008090033038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd91893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e45760003560e01c806365834acc1161010f578063b64230ba116100a2578063d547741f11610071578063d547741f14610486578063e454a5ed14610499578063ef47da6d146104c0578063f7bd381f146104d357600080fd5b8063b64230ba1461042f578063bbeee59114610442578063cbf8e6c414610455578063ccf61a411461045d57600080fd5b80639cd38be5116100de5780639cd38be5146103d25780639fc2c476146103e5578063a217fddf1461040c578063a734f06e1461041457600080fd5b806365834acc14610372578063687020d814610385578063907ab008146103ac57806391d14854146103bf57600080fd5b80632db8c129116101875780634c854126116101565780634c854126146103035780634d1dd98f14610316578063504254911461033d5780635163b4771461035d57600080fd5b80632db8c129146102b75780632f2ff15d146102ca57806336568abe146102dd5780634a2c1bab146102f057600080fd5b806311eff09c116101c357806311eff09c1461024b578063185025ef1461026c57806319b44cd914610281578063248a9ca31461029457600080fd5b8062b8ff92146101e957806301ffc9a7146101fe5780631078f38814610226575b600080fd5b6101fc6101f73660046128d2565b6104e6565b005b61021161020c366004612915565b61057a565b60405190151581526020015b60405180910390f35b6009546001600160a01b03165b6040516001600160a01b03909116815260200161021d565b61025e610259366004612988565b6105b1565b60405190815260200161021d565b61025e60008051602061305a83398151915281565b61025e61028f3660046129f1565b610a81565b61025e6102a2366004612a4c565b60009081526020819052604090206001015490565b6101fc6102c5366004612a65565b610d74565b6101fc6102d8366004612aa1565b610db0565b6101fc6102eb366004612aa1565b610ddb565b6101fc6102fe366004612ae3565b610e59565b6101fc610311366004612ba8565b610f1d565b61025e7fe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b91181565b61035061034b366004612bd2565b610fe1565b60405161021d9190612bed565b610365611005565b60405161021d9190612c3a565b610211610380366004612bd2565b6112bf565b61025e7f038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd981565b6101fc6103ba366004612ae3565b61133d565b6102116103cd366004612aa1565b61141b565b6101fc6103e0366004612ba8565b611444565b61025e7f1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae81565b61025e600081565b61023373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61021161043d366004612bd2565b611468565b6101fc610450366004612ca2565b611475565b610350611b1f565b61023361046b366004612bd2565b6004602052600090815260409020546001600160a01b031681565b6101fc610494366004612aa1565b611b30565b61025e7f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d381565b6101fc6104ce366004612bd2565b611b56565b6101fc6104e1366004612ba8565b611ba0565b7f1893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954ae6105118133611d65565b60405163abb347a960e01b81526001600160a01b038481166004830152838116602483015285169063abb347a990604401600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b5050505050505050565b60006001600160e01b03198216637965db0b60e01b14806105ab57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600954604051631960d2b360e21b81523360048201526000916001600160a01b0316906365834acc9060240160206040518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190612d54565b6106785760405162461bcd60e51b81526020600482015260176024820152764d616368696e6572793a206e6f74206d656368616e696360481b60448201526064015b60405180910390fd5b6106f061068b6060870160408801612bd2565b6008600061069c60208a018a612bd2565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008860200160208101906106d19190612bd2565b6001600160a01b03168152602081019190915260400160002090611dc9565b61070d5760405163d69b537960e01b815260040160405180910390fd5b610718600185611dc9565b610735576040516364a7bd4d60e11b815260040160405180910390fd5b600060608601356107e7576107506040870160208801612bd2565b6001600160a01b03166370a0823161076b6020890189612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156107aa57600080fd5b505afa1580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e29190612d76565b6107ed565b85606001355b90506108226107ff6020880188612bd2565b868361081160408b0160208c01612bd2565b6001600160a01b0316929190611dee565b60006108346060880160408901612bd2565b6001600160a01b03166370a0823161084f60208a018a612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561088e57600080fd5b505afa1580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190612d76565b90506001600160a01b03861663a5d4096b6108e460208a018a612bd2565b6108f460408b0160208c01612bd2565b61090460608c0160408d01612bd2565b868c608001358b8b6040518863ffffffff1660e01b815260040161092e9796959493929190612db8565b600060405180830381600087803b15801561094857600080fd5b505af115801561095c573d6000803e3d6000fd5b508392506109739150506060890160408a01612bd2565b6001600160a01b03166370a0823161098e60208b018b612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156109cd57600080fd5b505afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612d76565b610a0f9190612e1e565b92508660800135831015610a36576040516309d2d38b60e31b815260040160405180910390fd5b604080518481526001600160a01b03881660208201527feb6edbd932a6290d7ca794a21b27f2da7d46b0f9aa0cde6135ce1d0469ad144e910160405180910390a15050949350505050565b600060008051602061305a833981519152610a9c8133611d65565b3360009081526004602090815260408220546001600160a01b03169190610ac590880188612bd2565b6001600160a01b03161480610af257506000610ae76040880160208901612bd2565b6001600160a01b0316145b15610b105760405163d92e233d60e01b815260040160405180910390fd5b6040860135610b3257604051631f2a200560e01b815260040160405180910390fd5b6060860135610b5457604051635380c59d60e01b815260040160405180910390fd5b610b6b3382604089013561081160208b018b612bd2565b6000610b7d6040880160208901612bd2565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610bbe57600080fd5b505afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190612d76565b90506001600160a01b03821663a5d4096b33610c1560208b018b612bd2565b610c2560408c0160208d01612bd2565b8b604001358c606001358c8c6040518863ffffffff1660e01b8152600401610c539796959493929190612db8565b600060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b50839250610c989150506040890160208a01612bd2565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610cd957600080fd5b505afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190612d76565b610d1b9190612e1e565b9350816001600160a01b0316336001600160a01b03167f77afa6671ccb5a39d59afc769ee32cdfdc0e4d7b9bbc32a0092a27843a74e64486604051610d6291815260200190565b60405180910390a35050509392505050565b7f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3610d9f8133611d65565b610daa848484611e59565b50505050565b600082815260208190526040902060010154610dcc8133611d65565b610dd68383611ffb565b505050565b6001600160a01b0381163314610e4b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161066f565b610e55828261207f565b5050565b7f038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd9610e848133611d65565b60005b8251811015610dd65760006001600160a01b0316838281518110610ead57610ead612e35565b60200260200101516001600160a01b03161415610edd5760405163d92e233d60e01b815260040160405180910390fd5b610f0a838281518110610ef257610ef2612e35565b602002602001015160016120e490919063ffffffff16565b5080610f1581612e4b565b915050610e87565b60008051602061305a833981519152610f368133611d65565b6001600160a01b0383161580610f5357506001600160a01b038216155b15610f715760405163d92e233d60e01b815260040160405180910390fd5b610f7c6005336120e4565b50336000908152600760205260409020610f9690846120e4565b503360009081526008602090815260408083206001600160a01b03871684529091529020610fc490836120e4565b610dd65760405163d69b537960e01b815260040160405180910390fd5b6001600160a01b03811660009081526003602052604090206060906105ab906120f9565b60606000805b61101560056120f9565b518110156110e457600061102a600583612106565b6001600160a01b03811660009081526007602052604081209192509061104f906120f9565b905060005b81518110156110ce57600082828151811061107157611071612e35565b6020908102919091018101516001600160a01b0380871660009081526008845260408082209284168252919093529091209091506110ae90612112565b6110b89087612e66565b95505080806110c690612e4b565b915050611054565b50505080806110dc90612e4b565b91505061100b565b508067ffffffffffffffff8111156110fe576110fe612acd565b60405190808252806020026020018201604052801561114957816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161111c5790505b5091506000805b61115a60056120f9565b518110156112b957600061116f600583612106565b6001600160a01b038116600090815260076020526040812091925090611194906120f9565b905060005b81518110156112a35760008282815181106111b6576111b6612e35565b6020908102919091018101516001600160a01b03808716600090815260088452604080822092841682529190935282209092506111f2906120f9565b905060005b815181101561128d576040518060600160405280876001600160a01b03168152602001846001600160a01b0316815260200183838151811061123b5761123b612e35565b60200260200101516001600160a01b03168152508a898151811061126157611261612e35565b6020026020010181905250878061127790612e4b565b985050808061128590612e4b565b9150506111f7565b505050808061129b90612e4b565b915050611199565b50505080806112b190612e4b565b915050611150565b50505090565b600954604051631960d2b360e21b81526001600160a01b03838116600483015260009216906365834acc9060240160206040518083038186803b15801561130557600080fd5b505afa158015611319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190612d54565b7f038c8d5a0695aa8e4bf7e2d14cb85443db816cf8bdf8985d9f1a65519aeb6cd96113688133611d65565b60005b8251811015610dd65760006113bc6003600086858151811061138f5761138f612e35565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020612112565b11156113db576040516361c45a0f60e01b815260040160405180910390fd5b6114088382815181106113f0576113f0612e35565b6020026020010151600161211c90919063ffffffff16565b508061141381612e4b565b91505061136b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061305a83398151915261145d8133611d65565b610dd6338484612131565b60006105ab600183611dc9565b600954604051631960d2b360e21b81523360048201526001600160a01b03909116906365834acc9060240160206040518083038186803b1580156114b857600080fd5b505afa1580156114cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f09190612d54565b6115365760405162461bcd60e51b81526020600482015260176024820152764d616368696e6572793a206e6f74206d656368616e696360481b604482015260640161066f565b60008467ffffffffffffffff81111561155157611551612acd565b60405190808252806020026020018201604052801561157a578160200160208202803683370190505b509050611588600185611dc9565b6115a5576040516364a7bd4d60e11b815260040160405180910390fd5b60005b858110156118f1576116558787838181106115c5576115c5612e35565b905060a0020160400160208101906115dd9190612bd2565b600860008a8a868181106115f3576115f3612e35565b61160992602060a0909202019081019150612bd2565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a8681811061163d5761163d612e35565b905060a0020160200160208101906106d19190612bd2565b6116725760405163d69b537960e01b815260040160405180910390fd5b600087878381811061168657611686612e35565b905060a002016060013560001415611774578787838181106116aa576116aa612e35565b905060a0020160200160208101906116c29190612bd2565b6001600160a01b03166370a082318989858181106116e2576116e2612e35565b6116f892602060a0909202019081019150612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173757600080fd5b505afa15801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f9190612d76565b611791565b87878381811061178657611786612e35565b905060a00201606001355b90506117ea8888848181106117a8576117a8612e35565b6117be92602060a0909202019081019150612bd2565b87838b8b878181106117d2576117d2612e35565b905060a0020160200160208101906108119190612bd2565b8787838181106117fc576117fc612e35565b905060a0020160400160208101906118149190612bd2565b6001600160a01b03166370a0823189898581811061183457611834612e35565b61184a92602060a0909202019081019150612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561188957600080fd5b505afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c19190612d76565b8383815181106118d3576118d3612e35565b602090810291909101015250806118e981612e4b565b9150506115a8565b506040516364c3d39f60e01b81526001600160a01b038516906364c3d39f906119209086908690600401612e7e565b600060405180830381600087803b15801561193a57600080fd5b505af115801561194e573d6000803e3d6000fd5b5050505060005b85811015611add5781818151811061196f5761196f612e35565b602002602001015187878381811061198957611989612e35565b905060a0020160400160208101906119a19190612bd2565b6001600160a01b03166370a082318989858181106119c1576119c1612e35565b6119d792602060a0909202019081019150612bd2565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a1657600080fd5b505afa158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4e9190612d76565b611a589190612e1e565b828281518110611a6a57611a6a612e35565b602002602001018181525050818181518110611a8857611a88612e35565b6020026020010151878783818110611aa257611aa2612e35565b905060a00201608001351015611acb576040516309d2d38b60e31b815260040160405180910390fd5b80611ad581612e4b565b915050611955565b507f4a8b10eb58b24f8872a8364002b92c533c3a143d3588739819be8eb6b38679658185604051611b0f929190612e92565b60405180910390a1505050505050565b6060611b2b60016120f9565b905090565b600082815260208190526040902060010154611b4c8133611d65565b610dd6838361207f565b7f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3611b818133611d65565b600980546001600160a01b0319166001600160a01b0384161790555050565b7fe39dc63caee7a15eb0ffb77a826d10c23d40b5f7182b000737ab5c078838b911611bcb8133611d65565b6001600160a01b0383161580611be857506001600160a01b038216155b15611c065760405163d92e233d60e01b815260040160405180910390fd5b6001826001600160a01b031663cd985af06040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4157600080fd5b505afa158015611c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c799190612efc565b6001811115611c8a57611c8a612ee6565b14611ca857604051634b3d6f3360e11b815260040160405180910390fd5b611cb3600183611dc9565b611cd0576040516364a7bd4d60e11b815260040160405180910390fd5b6001600160a01b038381166000908152600460205260409020541615611d23576001600160a01b0380841660009081526004602090815260408083205490931682526003905220611d21908461211c565b505b6001600160a01b03838116600090815260046020908152604080832080546001600160a01b03191694871694851790559282526003905220610daa90846120e4565b611d6f828261141b565b610e5557611d87816001600160a01b031660146122d8565b611d928360206122d8565b604051602001611da3929190612f49565b60408051601f198184030181529082905262461bcd60e51b825261066f91600401612fbe565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610daa9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612474565b6001600160a01b038316611ec75760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b606482015260840161066f565b611ed2600a83611dc9565b15611f365760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b606482015260840161066f565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f97576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015611f91573d6000803e3d6000fd5b50611fab565b611fab6001600160a01b0383168483612546565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b612005828261141b565b610e55576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561203b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612089828261141b565b15610e55576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611de7836001600160a01b038416612576565b60606000611de7836125c5565b6000611de78383612621565b60006105ab825490565b6000611de7836001600160a01b03841661264b565b6001600160a01b038216158061214e57506001600160a01b038116155b1561216c5760405163d92e233d60e01b815260040160405180910390fd5b604051636eb1769f60e11b81523360048201523060248201526001600160a01b0383169063dd62ed3e9060440160206040518083038186803b1580156121b157600080fd5b505afa1580156121c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e99190612d76565b1561220757604051633c553c4360e11b815260040160405180910390fd5b6001600160a01b038084166000908152600860209081526040808320938616835292905220612236908261211c565b6122535760405163d69b537960e01b815260040160405180910390fd5b6001600160a01b03808416600090815260086020908152604080832093861683529290522061228190612112565b610dd6576001600160a01b03831660009081526007602052604090206122a7908361211c565b506001600160a01b03831660009081526007602052604090206122c990612112565b610dd657610daa60058461211c565b606060006122e7836002612ff1565b6122f2906002612e66565b67ffffffffffffffff81111561230a5761230a612acd565b6040519080825280601f01601f191660200182016040528015612334576020820181803683370190505b509050600360fc1b8160008151811061234f5761234f612e35565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061237e5761237e612e35565b60200101906001600160f81b031916908160001a90535060006123a2846002612ff1565b6123ad906001612e66565b90505b6001811115612425576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123e1576123e1612e35565b1a60f81b8282815181106123f7576123f7612e35565b60200101906001600160f81b031916908160001a90535060049490941c9361241e81613010565b90506123b0565b508315611de75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161066f565b60006124c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661273e9092919063ffffffff16565b805190915015610dd657808060200190518101906124e79190612d54565b610dd65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066f565b6040516001600160a01b038316602482015260448101829052610dd690849063a9059cbb60e01b90606401611e22565b60008181526001830160205260408120546125bd575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ab565b5060006105ab565b60608160000180548060200260200160405190810160405280929190818152602001828054801561261557602002820191906000526020600020905b815481526020019060010190808311612601575b50505050509050919050565b600082600001828154811061263857612638612e35565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561273457600061266f600183612e1e565b855490915060009061268390600190612e1e565b90508181146126e85760008660000182815481106126a3576126a3612e35565b90600052602060002001549050808760000184815481106126c6576126c6612e35565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806126f9576126f9613027565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ab565b60009150506105ab565b606061274d8484600085612755565b949350505050565b6060824710156127b65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066f565b843b6128045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066f565b600080866001600160a01b03168587604051612820919061303d565b60006040518083038185875af1925050503d806000811461285d576040519150601f19603f3d011682016040523d82523d6000602084013e612862565b606091505b509150915061287282828661287d565b979650505050505050565b6060831561288c575081611de7565b82511561289c5782518084602001fd5b8160405162461bcd60e51b815260040161066f9190612fbe565b80356001600160a01b03811681146128cd57600080fd5b919050565b6000806000606084860312156128e757600080fd5b6128f0846128b6565b92506128fe602085016128b6565b915061290c604085016128b6565b90509250925092565b60006020828403121561292757600080fd5b81356001600160e01b031981168114611de757600080fd5b60008083601f84011261295157600080fd5b50813567ffffffffffffffff81111561296957600080fd5b60208301915083602082850101111561298157600080fd5b9250929050565b60008060008084860360e081121561299f57600080fd5b60a08112156129ad57600080fd5b508493506129bd60a086016128b6565b925060c085013567ffffffffffffffff8111156129d957600080fd5b6129e58782880161293f565b95989497509550505050565b600080600083850360a0811215612a0757600080fd5b6080811215612a1557600080fd5b50839250608084013567ffffffffffffffff811115612a3357600080fd5b612a3f8682870161293f565b9497909650939450505050565b600060208284031215612a5e57600080fd5b5035919050565b600080600060608486031215612a7a57600080fd5b612a83846128b6565b9250612a91602085016128b6565b9150604084013590509250925092565b60008060408385031215612ab457600080fd5b82359150612ac4602084016128b6565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612af657600080fd5b823567ffffffffffffffff80821115612b0e57600080fd5b818501915085601f830112612b2257600080fd5b813581811115612b3457612b34612acd565b8060051b604051601f19603f83011681018181108582111715612b5957612b59612acd565b604052918252848201925083810185019188831115612b7757600080fd5b938501935b82851015612b9c57612b8d856128b6565b84529385019392850192612b7c565b98975050505050505050565b60008060408385031215612bbb57600080fd5b612bc4836128b6565b9150612ac4602084016128b6565b600060208284031215612be457600080fd5b611de7826128b6565b6020808252825182820181905260009190848201906040850190845b81811015612c2e5783516001600160a01b031683529284019291840191600101612c09565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612c9557815180516001600160a01b0390811686528782015181168887015290860151168585015260609093019290850190600101612c57565b5091979650505050505050565b600080600080600060608688031215612cba57600080fd5b853567ffffffffffffffff80821115612cd257600080fd5b818801915088601f830112612ce657600080fd5b813581811115612cf557600080fd5b89602060a083028501011115612d0a57600080fd5b60208301975080965050612d20602089016128b6565b94506040880135915080821115612d3657600080fd5b50612d438882890161293f565b969995985093965092949392505050565b600060208284031215612d6657600080fd5b81518015158114611de757600080fd5b600060208284031215612d8857600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905260c060a08201819052600090612dfb9083018486612d8f565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e3057612e30612e08565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612e5f57612e5f612e08565b5060010190565b60008219821115612e7957612e79612e08565b500190565b60208152600061274d602083018486612d8f565b604080825283519082018190526000906020906060840190828701845b82811015612ecb57815184529284019290840190600101612eaf565b5050506001600160a01b039490941692019190915250919050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612f0e57600080fd5b815160028110611de757600080fd5b60005b83811015612f38578181015183820152602001612f20565b83811115610daa5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f81816017850160208801612f1d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fb2816028840160208801612f1d565b01602801949350505050565b6020815260008251806020840152612fdd816040850160208701612f1d565b601f01601f19169190910160400192915050565b600081600019048311821515161561300b5761300b612e08565b500290565b60008161301f5761301f612e08565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000825161304f818460208701612f1d565b919091019291505056fe49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7a26469706673582212205bb3e0307c962d6e570a1af311ee8c1bfb8fcd9209e48ea948b152fb9699b45264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4640,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_swappers",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)2210_storage"
      },
      {
        "astId": 4645,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_swapperStrategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(AddressSet)2210_storage)"
      },
      {
        "astId": 4650,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "strategySyncSwapper",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4144,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_strategies",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)2210_storage"
      },
      {
        "astId": 4149,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_tokensInByStrategy",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(AddressSet)2210_storage)"
      },
      {
        "astId": 4156,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_tokensOutByStrategyAndTokenIn",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(AddressSet)2210_storage))"
      },
      {
        "astId": 3337,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_mechanicsRegistry",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IMechanicsRegistry)2990"
      },
      {
        "astId": 3086,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "protocolTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(AddressSet)2210_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMechanicsRegistry)2990": {
        "encoding": "inplace",
        "label": "contract IMechanicsRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(AddressSet)2210_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(AddressSet)2210_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)2210_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2210_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2210_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2209,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1909_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1909_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1904,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1908,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}