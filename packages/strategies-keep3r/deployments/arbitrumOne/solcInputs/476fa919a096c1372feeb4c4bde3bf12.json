{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/stealth/IStealthRelayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport './IStealthTx.sol';\n\ninterface IStealthRelayer is IStealthTx {\n  function caller() external view returns (address _caller);\n\n  function forceBlockProtection() external view returns (bool _forceBlockProtection);\n\n  function jobs() external view returns (address[] memory _jobsList);\n\n  function setForceBlockProtection(bool _forceBlockProtection) external;\n\n  function addJobs(address[] calldata _jobsList) external;\n\n  function addJob(address _job) external;\n\n  function removeJobs(address[] calldata _jobsList) external;\n\n  function removeJob(address _job) external;\n\n  function execute(\n    address _address,\n    bytes memory _callData,\n    bytes32 _stealthHash,\n    uint256 _blockNumber\n  ) external payable returns (bytes memory _returnData);\n\n  function executeAndPay(\n    address _address,\n    bytes memory _callData,\n    bytes32 _stealthHash,\n    uint256 _blockNumber,\n    uint256 _payment\n  ) external payable returns (bytes memory _returnData);\n\n  function executeWithoutBlockProtection(\n    address _address,\n    bytes memory _callData,\n    bytes32 _stealthHash\n  ) external payable returns (bytes memory _returnData);\n\n  function executeWithoutBlockProtectionAndPay(\n    address _job,\n    bytes memory _callData,\n    bytes32 _stealthHash,\n    uint256 _payment\n  ) external payable returns (bytes memory _returnData);\n}\n"
    },
    "contracts/interfaces/stealth/IStealthTx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IStealthTx {\n  event StealthVaultSet(address _stealthVault);\n  event PenaltySet(uint256 _penalty);\n  event MigratedStealthVault(address _migratedTo);\n\n  function stealthVault() external view returns (address);\n\n  function penalty() external view returns (uint256);\n\n  function setStealthVault(address _stealthVault) external;\n\n  function setPenalty(uint256 _penalty) external;\n}\n"
    },
    "contracts/interfaces/keep3r/IChainLinkFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IChainLinkFeed {\n  function latestAnswer() external view returns (int256);\n}\n"
    },
    "contracts/utils/GasPriceLimited.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '../interfaces/utils/IGasPriceLimited.sol';\nimport '../interfaces/keep3r/IChainLinkFeed.sol';\n\nabstract contract GasPriceLimited is IGasPriceLimited {\n  IChainLinkFeed public constant FASTGAS = IChainLinkFeed(0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C);\n\n  uint256 public override maxGasPrice;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor() {}\n\n  // MaxGasPrice\n  function _setMaxGasPrice(uint256 _maxGasPrice) internal {\n    maxGasPrice = _maxGasPrice;\n    emit SetMaxGasPrice(_maxGasPrice);\n  }\n\n  modifier limitGasPrice() {\n    require(uint256(FASTGAS.latestAnswer()) <= maxGasPrice, 'GasPriceLimited::limit-gas-price:gas-price-exceed-max');\n    _;\n  }\n}\n"
    },
    "contracts/interfaces/utils/IGasPriceLimited.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IGasPriceLimited {\n  event SetMaxGasPrice(uint256 _maxGasPrice);\n\n  function maxGasPrice() external view returns (uint256 _maxGasPrice);\n\n  function setMaxGasPrice(uint256 _maxGasPrice) external;\n}\n"
    },
    "contracts/jobs/v2/V2Keep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol';\nimport '@yearn-mechanics/contract-utils/solidity/interfaces/keep3r/IKeep3rV1Helper.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/keep3r/Keep3rAbstract.sol';\n\nimport '../../interfaces/jobs/v2/IV2Keeper.sol';\nimport '../../interfaces/jobs/v2/IV2Keep3rJob.sol';\n\nimport '../../interfaces/yearn/IBaseStrategy.sol';\nimport '../../interfaces/oracle/IYOracle.sol';\nimport '../../interfaces/keep3r/IChainLinkFeed.sol';\n\nabstract contract V2Keep3rJob is MachineryReady, Keep3r, IV2Keep3rJob {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address public override fastGasOracle = 0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C;\n\n  uint256 public constant PRECISION = 1_000;\n  uint256 public constant MAX_REWARD_MULTIPLIER = 1 * PRECISION; // 1x max reward multiplier\n  uint256 public override rewardMultiplier = 850;\n\n  address public override v2Keeper;\n\n  address public yOracle;\n\n  EnumerableSet.AddressSet internal _availableStrategies;\n\n  mapping(address => uint256) public requiredAmount;\n  mapping(address => uint256) public lastWorkAt;\n\n  // custom cost oracle calcs\n  mapping(address => address) public costToken;\n  mapping(address => address) public costPair;\n\n  uint256 public workCooldown;\n\n  constructor(\n    address _mechanicsRegistry,\n    address _yOracle,\n    address _keep3r,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age,\n    bool _onlyEOA,\n    address _v2Keeper,\n    uint256 _workCooldown\n  ) MachineryReady(_mechanicsRegistry) Keep3r(_keep3r) {\n    _setYOracle(_yOracle);\n    _setKeep3rRequirements(_bond, _minBond, _earned, _age, _onlyEOA);\n    v2Keeper = _v2Keeper;\n    if (_workCooldown > 0) _setWorkCooldown(_workCooldown);\n  }\n\n  // Keep3r Setters\n  function setKeep3r(address _keep3r) external override onlyGovernor {\n    _setKeep3r(_keep3r);\n  }\n\n  function setV2Keep3r(address _v2Keeper) external override onlyGovernor {\n    v2Keeper = _v2Keeper;\n  }\n\n  function setYOracle(address _yOracle) external override onlyGovernor {\n    _setYOracle(_yOracle);\n  }\n\n  function _setYOracle(address _yOracle) internal {\n    yOracle = _yOracle;\n  }\n\n  function setFastGasOracle(address _fastGasOracle) external override onlyGovernor {\n    require(_fastGasOracle != address(0), 'V2Keep3rJob::set-fas-gas-oracle:not-zero-address');\n    fastGasOracle = _fastGasOracle;\n  }\n\n  function setKeep3rRequirements(\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age,\n    bool _onlyEOA\n  ) external override onlyGovernor {\n    _setKeep3rRequirements(_bond, _minBond, _earned, _age, _onlyEOA);\n  }\n\n  function setRewardMultiplier(uint256 _rewardMultiplier) external override onlyGovernorOrMechanic {\n    _setRewardMultiplier(_rewardMultiplier);\n    emit SetRewardMultiplier(_rewardMultiplier);\n  }\n\n  function _setRewardMultiplier(uint256 _rewardMultiplier) internal {\n    require(_rewardMultiplier <= MAX_REWARD_MULTIPLIER, 'V2Keep3rJob::set-reward-multiplier:multiplier-exceeds-max');\n    rewardMultiplier = _rewardMultiplier;\n  }\n\n  // Setters\n  function setWorkCooldown(uint256 _workCooldown) external override onlyGovernorOrMechanic {\n    _setWorkCooldown(_workCooldown);\n  }\n\n  function _setWorkCooldown(uint256 _workCooldown) internal {\n    require(_workCooldown > 0, 'V2Keep3rJob::set-work-cooldown:should-not-be-zero');\n    workCooldown = _workCooldown;\n  }\n\n  // Governor\n  function addStrategies(\n    address[] calldata _strategies,\n    uint256[] calldata _requiredAmounts,\n    address[] calldata _costTokens,\n    address[] calldata _costPairs\n  ) external override onlyGovernorOrMechanic {\n    require(_strategies.length == _requiredAmounts.length, 'V2Keep3rJob::add-strategies:strategies-required-amounts-different-length');\n    for (uint256 i; i < _strategies.length; i++) {\n      _addStrategy(_strategies[i], _requiredAmounts[i], _costTokens[i], _costPairs[i]);\n    }\n  }\n\n  function addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address _costToken,\n    address _costPair\n  ) external override onlyGovernorOrMechanic {\n    _addStrategy(_strategy, _requiredAmount, _costToken, _costPair);\n  }\n\n  function _addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address _costToken,\n    address _costPair\n  ) internal {\n    require(!_availableStrategies.contains(_strategy), 'V2Keep3rJob::add-strategy:strategy-already-added');\n    _setRequiredAmount(_strategy, _requiredAmount);\n    _setCostTokenAndPair(_strategy, _costToken, _costPair);\n    emit StrategyAdded(_strategy, _requiredAmount);\n    _availableStrategies.add(_strategy);\n  }\n\n  function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external override onlyGovernorOrMechanic {\n    require(_strategies.length == _requiredAmounts.length, 'V2Keep3rJob::update-strategies:strategies-required-amounts-different-length');\n    for (uint256 i; i < _strategies.length; i++) {\n      _updateRequiredAmount(_strategies[i], _requiredAmounts[i]);\n    }\n  }\n\n  function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external override onlyGovernorOrMechanic {\n    _updateRequiredAmount(_strategy, _requiredAmount);\n  }\n\n  function _updateRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\n    require(_availableStrategies.contains(_strategy), 'V2Keep3rJob::update-required-amount:strategy-not-added');\n    _setRequiredAmount(_strategy, _requiredAmount);\n    emit StrategyModified(_strategy, _requiredAmount);\n  }\n\n  function updateCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) external override onlyGovernorOrMechanic {\n    _updateCostTokenAndPair(_strategy, _costToken, _costPair);\n  }\n\n  function _updateCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) internal {\n    require(_availableStrategies.contains(_strategy), 'V2Keep3rJob::update-required-amount:strategy-not-added');\n    _setCostTokenAndPair(_strategy, _costToken, _costPair);\n  }\n\n  function removeStrategy(address _strategy) external override onlyGovernorOrMechanic {\n    require(_availableStrategies.contains(_strategy), 'V2Keep3rJob::remove-strategy:strategy-not-added');\n    delete requiredAmount[_strategy];\n    _availableStrategies.remove(_strategy);\n    emit StrategyRemoved(_strategy);\n  }\n\n  function _setRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\n    requiredAmount[_strategy] = _requiredAmount;\n  }\n\n  function _setCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) internal {\n    costToken[_strategy] = _costToken;\n    costPair[_strategy] = _costPair;\n  }\n\n  // Getters\n  function strategies() public view override returns (address[] memory _strategies) {\n    _strategies = new address[](_availableStrategies.length());\n    for (uint256 i; i < _availableStrategies.length(); i++) {\n      _strategies[i] = _availableStrategies.at(i);\n    }\n  }\n\n  // Keeper view actions (internal)\n  function _workable(address _strategy) internal view virtual returns (bool) {\n    require(_availableStrategies.contains(_strategy), 'V2Keep3rJob::workable:strategy-not-added');\n    if (workCooldown == 0 || block.timestamp > lastWorkAt[_strategy] + workCooldown) return true;\n    return false;\n  }\n\n  // Get eth costs\n  function _getCallCosts(address _strategy) internal view returns (uint256 _callCost) {\n    if (requiredAmount[_strategy] == 0) return 0;\n    uint256 _ethCost = requiredAmount[_strategy] * uint256(IChainLinkFeed(fastGasOracle).latestAnswer());\n    if (costToken[_strategy] == address(0)) return _ethCost;\n    return IYOracle(yOracle).getAmountOut(costPair[_strategy], WETH, _ethCost, costToken[_strategy]);\n  }\n\n  // Keep3r actions\n  function _workInternal(address _strategy) internal returns (uint256 _credits) {\n    uint256 _initialGas = gasleft();\n    require(_workable(_strategy), 'V2Keep3rJob::work:not-workable');\n\n    _work(_strategy);\n\n    _credits = _calculateCredits(_initialGas);\n\n    emit Worked(_strategy, msg.sender, _credits);\n  }\n\n  function _calculateCredits(uint256 _initialGas) internal view returns (uint256 _credits) {\n    // Gets default credits from KP3R_Helper and applies job reward multiplier\n    return (_getQuoteLimitFor(msg.sender, _initialGas) * rewardMultiplier) / PRECISION;\n  }\n\n  function _forceWork(address _strategy) internal {\n    _work(_strategy);\n    emit ForceWorked(_strategy);\n  }\n\n  function _work(address _strategy) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './UtilsReady.sol';\nimport '../utils/Machinery.sol';\n\nabstract contract MachineryReady is UtilsReady, Machinery {\n  constructor(address _mechanicsRegistry) Machinery(_mechanicsRegistry) UtilsReady() {}\n\n  // Machinery: restricted-access\n  function setMechanicsRegistry(address _mechanicsRegistry) external override onlyGovernor {\n    _setMechanicsRegistry(_mechanicsRegistry);\n  }\n\n  // Machinery: modifiers\n  modifier onlyGovernorOrMechanic() {\n    require(isGovernor(msg.sender) || isMechanic(msg.sender), 'Machinery::onlyGovernorOrMechanic:invalid-msg-sender');\n    _;\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/keep3r/IKeep3rV1Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IKeep3rV1Helper {\n  function quote(uint256 eth) external view returns (uint256);\n\n  function getFastGas() external view returns (uint256);\n\n  function bonds(address keeper) external view returns (uint256);\n\n  function getQuoteLimit(uint256 gasUsed) external view returns (uint256);\n\n  function getQuoteLimitFor(address origin, uint256 gasUsed) external view returns (uint256);\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/keep3r/Keep3rAbstract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/keep3r/IKeep3rV1.sol';\nimport '../../interfaces/keep3r/IKeep3r.sol';\n\nabstract contract Keep3r is IKeep3r {\n  IKeep3rV1 internal _Keep3r;\n  address public override bond;\n  uint256 public override minBond;\n  uint256 public override earned;\n  uint256 public override age;\n  bool public override onlyEOA;\n\n  constructor(address _keep3r) {\n    _setKeep3r(_keep3r);\n  }\n\n  // Setters\n  function _setKeep3r(address _keep3r) internal {\n    _Keep3r = IKeep3rV1(_keep3r);\n    emit Keep3rSet(_keep3r);\n  }\n\n  function _setKeep3rRequirements(\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age,\n    bool _onlyEOA\n  ) internal {\n    bond = _bond;\n    minBond = _minBond;\n    earned = _earned;\n    age = _age;\n    onlyEOA = _onlyEOA;\n    emit Keep3rRequirementsSet(_bond, _minBond, _earned, _age, _onlyEOA);\n  }\n\n  // Modifiers\n  // Only checks if caller is a valid keeper, payment should be handled manually\n  modifier onlyKeeper(address _keeper) {\n    _isKeeper(_keeper);\n    _;\n  }\n\n  // view\n  function keep3r() external view override returns (address _keep3r) {\n    return address(_Keep3r);\n  }\n\n  // handles default payment after execution\n  modifier paysKeeper(address _keeper) {\n    _;\n    _paysKeeper(_keeper);\n  }\n\n  // Internal helpers\n  function _isKeeper(address _keeper) internal {\n    if (onlyEOA) require(_keeper == tx.origin, 'keep3r::isKeeper:keeper-is-not-eoa');\n    if (minBond == 0 && earned == 0 && age == 0) {\n      // If no custom keeper requirements are set, just evaluate if sender is a registered keeper\n      require(_Keep3r.isKeeper(_keeper), 'keep3r::isKeeper:keeper-is-not-registered');\n    } else {\n      if (bond == address(0)) {\n        // Checks for min KP3R, earned and age.\n        require(_Keep3r.isMinKeeper(_keeper, minBond, earned, age), 'keep3r::isKeeper:keeper-not-min-requirements');\n      } else {\n        // Checks for min custom-bond, earned and age.\n        require(_Keep3r.isBondedKeeper(_keeper, bond, minBond, earned, age), 'keep3r::isKeeper:keeper-not-custom-min-requirements');\n      }\n    }\n  }\n\n  function _getQuoteLimitFor(address _for, uint256 _initialGas) internal view returns (uint256 _credits) {\n    return _Keep3r.KPRH().getQuoteLimitFor(_for, _initialGas - gasleft());\n  }\n\n  // pays in bonded KP3R after execution\n  function _paysKeeper(address _keeper) internal {\n    _Keep3r.worked(_keeper);\n  }\n\n  // pays _amount in KP3R after execution\n  function _paysKeeperInTokens(address _keeper, uint256 _amount) internal {\n    _Keep3r.receipt(address(_Keep3r), _keeper, _amount);\n  }\n\n  // pays _amount in bonded KP3R after execution\n  function _paysKeeperAmount(address _keeper, uint256 _amount) internal {\n    _Keep3r.workReceipt(_keeper, _amount);\n  }\n\n  // pays _amount in _credit after execution\n  function _paysKeeperCredit(\n    address _credit,\n    address _keeper,\n    uint256 _amount\n  ) internal {\n    _Keep3r.receipt(_credit, _keeper, _amount);\n  }\n\n  // pays _amount in ETH after execution\n  function _paysKeeperEth(address _keeper, uint256 _amount) internal {\n    _Keep3r.receiptETH(_keeper, _amount);\n  }\n}\n"
    },
    "contracts/interfaces/jobs/v2/IV2Keeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\n\ninterface IV2Keeper {\n  // Getters\n  function jobs() external view returns (address[] memory);\n\n  event JobAdded(address _job);\n  event JobRemoved(address _job);\n\n  // Setters\n  function addJobs(address[] calldata _jobs) external;\n\n  function addJob(address _job) external;\n\n  function removeJob(address _job) external;\n\n  // Jobs actions\n  function tend(address _strategy) external;\n\n  function harvest(address _strategy) external;\n}\n"
    },
    "contracts/interfaces/jobs/v2/IV2Keep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\nimport '../IKeep3rJob.sol';\n\ninterface IV2Keep3rJob is IKeep3rJob {\n  // event Keep3rSet(address keep3r);\n  event Keep3rHelperSet(address keep3rHelper);\n  event SlidingOracleSet(address slidingOracle);\n\n  // Setters\n  event StrategyAdded(address _strategy, uint256 _requiredAmount);\n  event StrategyModified(address _strategy, uint256 _requiredAmount);\n  event StrategyRemoved(address _strategy);\n\n  // Actions by Keeper\n  event Worked(address _strategy, address _keeper, uint256 _credits);\n\n  // Actions forced by governor\n  event ForceWorked(address _strategy);\n\n  // Getters\n  function v2Keeper() external view returns (address _v2Keeper);\n\n  function fastGasOracle() external view returns (address _fastGasOracle);\n\n  function strategies() external view returns (address[] memory);\n\n  function workable(address _strategy) external view returns (bool);\n\n  // Setters\n  function setV2Keep3r(address _v2Keeper) external;\n\n  function setYOracle(address _v2Keeper) external;\n\n  function setFastGasOracle(address _fastGasOracle) external;\n\n  function setWorkCooldown(uint256 _workCooldown) external;\n\n  function addStrategies(\n    address[] calldata _strategy,\n    uint256[] calldata _requiredAmount,\n    address[] calldata _costTokens,\n    address[] calldata _costPairs\n  ) external;\n\n  function addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address _costToken,\n    address _costPair\n  ) external;\n\n  function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external;\n\n  function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external;\n\n  function updateCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) external;\n\n  function removeStrategy(address _strategy) external;\n\n  // Keeper actions\n  function work(address _strategy) external returns (uint256 _credits);\n\n  // Mechanics keeper bypass\n  function forceWork(address _strategy) external;\n}\n"
    },
    "contracts/interfaces/yearn/IBaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IBaseStrategy {\n  function vault() external view returns (address _vault);\n\n  function strategist() external view returns (address _strategist);\n\n  function rewards() external view returns (address _rewards);\n\n  function keeper() external view returns (address _keeper);\n\n  function want() external view returns (address _want);\n\n  function name() external view returns (string memory _name);\n\n  function profitFactor() external view returns (uint256 _profitFactor);\n\n  function maxReportDelay() external view returns (uint256 _maxReportDelay);\n\n  // custom view\n  function crv() external view returns (address _crv);\n\n  // Setters\n  function setStrategist(address _strategist) external;\n\n  function setKeeper(address _keeper) external;\n\n  function setRewards(address _rewards) external;\n\n  function tendTrigger(uint256 callCost) external view returns (bool);\n\n  function tend() external;\n\n  function harvestTrigger(uint256 callCost) external view returns (bool);\n\n  function harvest() external;\n\n  function setBorrowCollateralizationRatio(uint256 _c) external;\n}\n"
    },
    "contracts/interfaces/oracle/IYOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IYOracle {\n  function defaultOracle() external view returns (address _defaultOracle);\n\n  function pairOracle(address _pair) external view returns (address _oracle);\n\n  function setPairOracle(address _pair, address _oracle) external;\n\n  function setDefaultOracle(address _oracle) external;\n\n  function getAmountOut(\n    address _pair,\n    address _tokenIn,\n    uint256 _amountIn,\n    address _tokenOut\n  ) external view returns (uint256 _amountOut);\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/abstract/UtilsReady.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../utils/Governable.sol';\nimport '../utils/CollectableDust.sol';\nimport '../utils/Pausable.sol';\n\nabstract contract UtilsReady is Governable, CollectableDust, Pausable {\n  constructor() Governable(msg.sender) {}\n\n  // Governable: restricted-access\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\n    _setPendingGovernor(_pendingGovernor);\n  }\n\n  function acceptGovernor() external override onlyPendingGovernor {\n    _acceptGovernor();\n  }\n\n  // Collectable Dust: restricted-access\n  function sendDust(\n    address _to,\n    address _token,\n    uint256 _amount\n  ) external virtual override onlyGovernor {\n    _sendDust(_to, _token, _amount);\n  }\n\n  // Pausable: restricted-access\n  function pause(bool _paused) external override onlyGovernor {\n    _pause(_paused);\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/utils/Machinery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '../../interfaces/utils/IMachinery.sol';\nimport '../../interfaces/mechanics/IMechanicsRegistry.sol';\n\ncontract Machinery is IMachinery {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  IMechanicsRegistry internal _mechanicsRegistry;\n\n  constructor(address __mechanicsRegistry) {\n    _setMechanicsRegistry(__mechanicsRegistry);\n  }\n\n  modifier onlyMechanic() {\n    require(_mechanicsRegistry.isMechanic(msg.sender), 'Machinery: not mechanic');\n    _;\n  }\n\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override {\n    _setMechanicsRegistry(__mechanicsRegistry);\n  }\n\n  function _setMechanicsRegistry(address __mechanicsRegistry) internal {\n    _mechanicsRegistry = IMechanicsRegistry(__mechanicsRegistry);\n  }\n\n  // View helpers\n  function mechanicsRegistry() external view override returns (address _mechanicRegistry) {\n    return address(_mechanicsRegistry);\n  }\n\n  function isMechanic(address _mechanic) public view override returns (bool _isMechanic) {\n    return _mechanicsRegistry.isMechanic(_mechanic);\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/utils/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/utils/IGovernable.sol';\n\ncontract Governable is IGovernable {\n  address public override governor;\n  address public override pendingGovernor;\n\n  constructor(address _governor) {\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\n    governor = _governor;\n  }\n\n  function setPendingGovernor(address _pendingGovernor) external virtual override onlyGovernor {\n    _setPendingGovernor(_pendingGovernor);\n  }\n\n  function acceptGovernor() external virtual override onlyPendingGovernor {\n    _acceptGovernor();\n  }\n\n  function _setPendingGovernor(address _pendingGovernor) internal {\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\n    pendingGovernor = _pendingGovernor;\n    emit PendingGovernorSet(_pendingGovernor);\n  }\n\n  function _acceptGovernor() internal {\n    governor = pendingGovernor;\n    pendingGovernor = address(0);\n    emit GovernorAccepted();\n  }\n\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\n    return _account == governor;\n  }\n\n  modifier onlyGovernor() {\n    require(isGovernor(msg.sender), 'governable/only-governor');\n    _;\n  }\n\n  modifier onlyPendingGovernor() {\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\n    _;\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/utils/CollectableDust.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '../../interfaces/utils/ICollectableDust.sol';\n\nabstract contract CollectableDust is ICollectableDust {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  EnumerableSet.AddressSet internal protocolTokens;\n\n  constructor() {}\n\n  function _addProtocolToken(address _token) internal {\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\n    protocolTokens.add(_token);\n  }\n\n  function _removeProtocolToken(address _token) internal {\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\n    protocolTokens.remove(_token);\n  }\n\n  function _sendDust(\n    address _to,\n    address _token,\n    uint256 _amount\n  ) internal {\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\n    if (_token == ETH_ADDRESS) {\n      payable(_to).transfer(_amount);\n    } else {\n      IERC20(_token).safeTransfer(_to, _amount);\n    }\n    emit DustSent(_to, _token, _amount);\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/utils/IPausable.sol';\n\nabstract contract Pausable is IPausable {\n  bool public paused;\n\n  constructor() {}\n\n  modifier notPaused() {\n    require(!paused, 'paused');\n    _;\n  }\n\n  function _pause(bool _paused) internal {\n    require(paused != _paused, 'no-change');\n    paused = _paused;\n    emit Paused(_paused);\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/utils/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IGovernable {\n  event PendingGovernorSet(address pendingGovernor);\n  event GovernorAccepted();\n\n  function setPendingGovernor(address _pendingGovernor) external;\n\n  function acceptGovernor() external;\n\n  function governor() external view returns (address _governor);\n\n  function pendingGovernor() external view returns (address _pendingGovernor);\n\n  function isGovernor(address _account) external view returns (bool _isGovernor);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/utils/ICollectableDust.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface ICollectableDust {\n  event DustSent(address _to, address token, uint256 amount);\n\n  function sendDust(\n    address _to,\n    address _token,\n    uint256 _amount\n  ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/utils/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IPausable {\n  event Paused(bool _paused);\n\n  function pause(bool _paused) external;\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/utils/IMachinery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IMachinery {\n  // View helpers\n  function mechanicsRegistry() external view returns (address _mechanicsRegistry);\n\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\n\n  // Setters\n  function setMechanicsRegistry(address _mechanicsRegistry) external;\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/mechanics/IMechanicsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IMechanicsRegistry {\n  event MechanicAdded(address _mechanic);\n  event MechanicRemoved(address _mechanic);\n\n  function addMechanic(address _mechanic) external;\n\n  function removeMechanic(address _mechanic) external;\n\n  function mechanics() external view returns (address[] memory _mechanicsList);\n\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/keep3r/IKeep3rV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport './IKeep3rV1Helper.sol';\n\ninterface IKeep3rV1 is IERC20 {\n  function name() external returns (string memory);\n\n  function KPRH() external view returns (IKeep3rV1Helper);\n\n  function isKeeper(address _keeper) external returns (bool);\n\n  function isMinKeeper(\n    address _keeper,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) external returns (bool);\n\n  function isBondedKeeper(\n    address _keeper,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) external returns (bool);\n\n  function addKPRCredit(address _job, uint256 _amount) external;\n\n  function addJob(address _job) external;\n\n  function removeJob(address _job) external;\n\n  function addVotes(address voter, uint256 amount) external;\n\n  function removeVotes(address voter, uint256 amount) external;\n\n  function revoke(address keeper) external;\n\n  function worked(address _keeper) external;\n\n  function workReceipt(address _keeper, uint256 _amount) external;\n\n  function receipt(\n    address credit,\n    address _keeper,\n    uint256 _amount\n  ) external;\n\n  function receiptETH(address _keeper, uint256 _amount) external;\n\n  function addLiquidityToJob(\n    address liquidity,\n    address job,\n    uint256 amount\n  ) external;\n\n  function applyCreditToJob(\n    address provider,\n    address liquidity,\n    address job\n  ) external;\n\n  function unbondLiquidityFromJob(\n    address liquidity,\n    address job,\n    uint256 amount\n  ) external;\n\n  function removeLiquidityFromJob(address liquidity, address job) external;\n\n  function jobs(address _job) external view returns (bool);\n\n  function jobList(uint256 _index) external view returns (address _job);\n\n  function credits(address _job, address _credit) external view returns (uint256 _amount);\n\n  function liquidityAccepted(address _liquidity) external view returns (bool);\n\n  function liquidityProvided(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256 _amount);\n\n  function liquidityApplied(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256 _amount);\n\n  function liquidityAmount(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256 _amount);\n\n  function liquidityUnbonding(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256 _amount);\n\n  function liquidityAmountsUnbonding(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256 _amount);\n\n  function bond(address bonding, uint256 amount) external;\n\n  function activate(address bonding) external;\n\n  function unbond(address bonding, uint256 amount) external;\n\n  function withdraw(address bonding) external;\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/keep3r/IKeep3r.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IKeep3r {\n  event Keep3rSet(address _keep3r);\n  event Keep3rRequirementsSet(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA);\n\n  function keep3r() external view returns (address _keep3r);\n\n  function bond() external view returns (address _bond);\n\n  function minBond() external view returns (uint256 _minBond);\n\n  function earned() external view returns (uint256 _earned);\n\n  function age() external view returns (uint256 _age);\n\n  function onlyEOA() external view returns (bool _onlyEOA);\n\n  function setKeep3r(address _keep3r) external;\n\n  function setKeep3rRequirements(\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age,\n    bool _onlyEOA\n  ) external;\n}\n"
    },
    "contracts/interfaces/jobs/IKeep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IKeep3rJob {\n  event SetRewardMultiplier(uint256 _rewardMultiplier);\n\n  function rewardMultiplier() external view returns (uint256 _rewardMultiplier);\n\n  function setRewardMultiplier(uint256 _rewardMultiplier) external;\n}\n"
    },
    "contracts/jobs/v2/V2Keep3rPublicJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport './V2Keep3rJob.sol';\n\nimport '../../interfaces/jobs/v2/IV2Keep3rPublicJob.sol';\n\nabstract contract V2Keep3rPublicJob is V2Keep3rJob, IV2Keep3rPublicJob {\n  constructor(\n    address _mechanicsRegistry,\n    address _yOracle,\n    address _keep3r,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age,\n    bool _onlyEOA,\n    address _v2Keeper,\n    uint256 _workCooldown\n  ) V2Keep3rJob(_mechanicsRegistry, _yOracle, _keep3r, _bond, _minBond, _earned, _age, _onlyEOA, _v2Keeper, _workCooldown) {}\n\n  // Mechanics keeper bypass\n  function forceWork(address _strategy) external override onlyGovernorOrMechanic {\n    _forceWork(_strategy);\n  }\n}\n"
    },
    "contracts/interfaces/jobs/v2/IV2Keep3rPublicJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\n\ninterface IV2Keep3rPublicJob {}\n"
    },
    "contracts/jobs/v2/TendV2Keep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport './V2Keep3rPublicJob.sol';\n\ncontract TendV2Keep3rJob is V2Keep3rPublicJob {\n  constructor(\n    address _mechanicsRegistry,\n    address _yOracle,\n    address _keep3r,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age,\n    bool _onlyEOA,\n    address _v2Keeper,\n    uint256 _workCooldown\n  )\n    V2Keep3rPublicJob(_mechanicsRegistry, _yOracle, _keep3r, _bond, _minBond, _earned, _age, _onlyEOA, _v2Keeper, _workCooldown)\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  function workable(address _strategy) external view override returns (bool) {\n    return _workable(_strategy);\n  }\n\n  function _workable(address _strategy) internal view override returns (bool) {\n    if (!super._workable(_strategy)) return false;\n    return IBaseStrategy(_strategy).tendTrigger(_getCallCosts(_strategy));\n  }\n\n  function _work(address _strategy) internal override {\n    lastWorkAt[_strategy] = block.timestamp;\n    IV2Keeper(v2Keeper).tend(_strategy);\n  }\n\n  // Keep3r actions\n  function work(address _strategy) external override notPaused onlyKeeper(msg.sender) returns (uint256 _credits) {\n    _credits = _workInternal(_strategy);\n    _paysKeeperAmount(msg.sender, _credits);\n  }\n}\n"
    },
    "contracts/oracle/YUnsafeOracleV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/UtilsReady.sol';\n\nimport '../interfaces/oracle/IYOracle.sol';\nimport '../interfaces/oracle/ISimpleOracle.sol';\n\ncontract YUnsafeOracleV1 is UtilsReady, IYOracle {\n  address public override defaultOracle;\n\n  mapping(address => address) public override pairOracle;\n\n  constructor(address _defaultOracle) UtilsReady() {\n    _setOracle(_defaultOracle);\n  }\n\n  function setPairOracle(address _pair, address _oracle) external override onlyGovernor {\n    pairOracle[_pair] = _oracle;\n  }\n\n  function setDefaultOracle(address _defaultOracle) external override onlyGovernor {\n    _setOracle(_defaultOracle);\n  }\n\n  function _setOracle(address _defaultOracle) internal {\n    defaultOracle = _defaultOracle;\n  }\n\n  function getAmountOut(\n    address _pair,\n    address _tokenIn,\n    uint256 _amountIn,\n    address _tokenOut\n  ) external view override returns (uint256 _amountOut) {\n    if (pairOracle[_pair] != address(0)) return ISimpleOracle(pairOracle[_pair]).getAmountOut(_pair, _tokenIn, _amountIn, _tokenOut);\n    return ISimpleOracle(defaultOracle).getAmountOut(_pair, _tokenIn, _amountIn, _tokenOut);\n  }\n}\n"
    },
    "contracts/interfaces/oracle/ISimpleOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface ISimpleOracle {\n  function getAmountOut(\n    address _pair,\n    address _tokenIn,\n    uint256 _amountIn,\n    address _tokenOut\n  ) external view returns (uint256 _amountOut);\n}\n"
    },
    "contracts/oracle/Keep3rV2OracleFactoryWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/UtilsReady.sol';\n\nimport '../interfaces/oracle/ISimpleOracle.sol';\nimport '../interfaces/keep3r/IKeep3rV2OracleFactory.sol';\n\ncontract Keep3rV2OracleFactoryWrapper is UtilsReady, ISimpleOracle {\n  address public immutable keep3rV2OracleFactory;\n\n  constructor(address _keep3rV2OracleFactory) UtilsReady() {\n    keep3rV2OracleFactory = _keep3rV2OracleFactory;\n  }\n\n  function getAmountOut(\n    address _pair,\n    address _tokenIn,\n    uint256 _amountIn,\n    address _tokenOut\n  ) external view override returns (uint256 _amountOut) {\n    (_amountOut, ) = IKeep3rV2OracleFactory(keep3rV2OracleFactory).current(_pair, _tokenIn, _amountIn, _tokenOut);\n  }\n}\n"
    },
    "contracts/interfaces/keep3r/IKeep3rV2OracleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IKeep3rV2OracleFactory {\n  function current(\n    address pair,\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut\n  ) external view returns (uint256 amountOut, uint256 lastUpdatedAgo);\n}\n"
    },
    "contracts/utils/VaultsRegistryHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/UtilsReady.sol';\nimport '../interfaces/yearn/IV2Registry.sol';\nimport '../interfaces/yearn/IV2Vault.sol';\n\ninterface IVaultsRegistryHelper {\n  function registry() external view returns (address _registry);\n\n  function getVaults() external view returns (address[] memory _vaults);\n\n  function getVaultStrategies(address _vault) external view returns (address[] memory _strategies);\n\n  function getVaultsAndStrategies() external view returns (address[] memory _vaults, address[] memory _strategies);\n}\n\ncontract VaultsRegistryHelper is UtilsReady, IVaultsRegistryHelper {\n  using Address for address;\n\n  address public immutable override registry;\n\n  constructor(address _registry) UtilsReady() {\n    registry = _registry;\n  }\n\n  function getVaults() public view override returns (address[] memory _vaults) {\n    uint256 _tokensLength = IV2Registry(registry).numTokens();\n    // vaults = [];\n    address[] memory _vaultsArray = new address[](_tokensLength * 20); // MAX length\n    uint256 _vaultIndex = 0;\n    for (uint256 i; i < _tokensLength; i++) {\n      address _token = IV2Registry(registry).tokens(i);\n      for (uint256 j; j < 20; j++) {\n        address _vault = IV2Registry(registry).vaults(_token, j);\n        if (_vault == address(0)) break;\n        _vaultsArray[_vaultIndex] = _vault;\n        _vaultIndex++;\n      }\n    }\n    _vaults = new address[](_vaultIndex);\n    for (uint256 i; i < _vaultIndex; i++) {\n      _vaults[i] = _vaultsArray[i];\n    }\n  }\n\n  function getVaultStrategies(address _vault) public view override returns (address[] memory _strategies) {\n    address[] memory _strategiesArray = new address[](20); // MAX length\n    uint256 i;\n    for (i; i < 20; i++) {\n      address _strategy = IV2Vault(_vault).withdrawalQueue(i);\n      if (_strategy == address(0)) break;\n      _strategiesArray[i] = _strategy;\n    }\n    _strategies = new address[](i);\n    for (uint256 j; j < i; j++) {\n      _strategies[j] = _strategiesArray[j];\n    }\n  }\n\n  function getVaultsAndStrategies() external view override returns (address[] memory _vaults, address[] memory _strategies) {\n    _vaults = getVaults();\n    address[] memory _strategiesArray = new address[](_vaults.length * 20); // MAX length\n    uint256 _strategiesIndex;\n    for (uint256 i; i < _vaults.length; i++) {\n      address[] memory _vaultStrategies = getVaultStrategies(_vaults[i]);\n      for (uint256 j; j < _vaultStrategies.length; j++) {\n        _strategiesArray[_strategiesIndex + j] = _vaultStrategies[j];\n      }\n      _strategiesIndex += _vaultStrategies.length;\n    }\n\n    _strategies = new address[](_strategiesIndex);\n    for (uint256 j; j < _strategiesIndex; j++) {\n      _strategies[j] = _strategiesArray[j];\n    }\n  }\n}\n"
    },
    "contracts/interfaces/yearn/IV2Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IV2Registry {\n  function wrappedVaults(address _vault) external view returns (address);\n\n  function isDelegatedVault(address _vault) external view returns (bool);\n\n  // Vaults getters\n  function getVault(uint256 index) external view returns (address vault);\n\n  function getVaults() external view returns (address[] memory);\n\n  function numTokens() external view returns (uint256 _numTokens);\n\n  function tokens(uint256 _index) external view returns (address _token);\n\n  function vaults(address _token, uint256 _index) external view returns (address _vault);\n\n  function getVaultInfo(address _vault)\n    external\n    view\n    returns (\n      address controller,\n      address token,\n      address strategy,\n      bool isWrapped,\n      bool isDelegated\n    );\n\n  function getVaultsInfo()\n    external\n    view\n    returns (\n      address[] memory controllerArray,\n      address[] memory tokenArray,\n      address[] memory strategyArray,\n      bool[] memory isWrappedArray,\n      bool[] memory isDelegatedArray\n    );\n}\n"
    },
    "contracts/interfaces/yearn/IV2Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IV2Vault {\n  function withdrawalQueue(uint256 _index) external view returns (address _strategy);\n}\n"
    },
    "contracts/utils/StrategistsBlockProtection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol';\n\ninterface IBlockProtection {\n  error InvalidBlock();\n\n  function callWithBlockProtection(\n    address _to,\n    bytes calldata _data,\n    uint256 _blockNumber\n  ) external payable returns (bytes memory _returnData);\n}\n\ncontract StrategistsBlockProtection is MachineryReady, IBlockProtection {\n  using Address for address;\n\n  constructor(address _mechanicsRegistry) MachineryReady(_mechanicsRegistry) {}\n\n  modifier blockNumberProtection(uint256 _blockNumber) {\n    if (_blockNumber != block.number) revert InvalidBlock();\n    _;\n  }\n\n  function callWithBlockProtection(\n    address _to,\n    bytes memory _data,\n    uint256 _blockNumber\n  ) external payable override blockNumberProtection(_blockNumber) onlyMechanic returns (bytes memory _returnData) {\n    return _to.functionCallWithValue(_data, msg.value);\n  }\n}\n"
    },
    "contracts/utils/BlockProtection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol';\n\ninterface IBlockProtection {\n  error InvalidBlock();\n\n  function callWithBlockProtection(\n    address _to,\n    bytes calldata _data,\n    uint256 _blockNumber\n  ) external payable returns (bytes memory _returnData);\n}\n\ncontract BlockProtection is MachineryReady, IBlockProtection {\n  using Address for address;\n\n  constructor(address _mechanicsRegistry) MachineryReady(_mechanicsRegistry) {}\n\n  modifier blockNumberProtection(uint256 _blockNumber) {\n    if (_blockNumber != block.number) revert InvalidBlock();\n    _;\n  }\n\n  function callWithBlockProtection(\n    address _to,\n    bytes memory _data,\n    uint256 _blockNumber\n  ) external payable override blockNumberProtection(_blockNumber) onlyMechanic returns (bytes memory _returnData) {\n    return _to.functionCallWithValue(_data, msg.value);\n  }\n}\n"
    },
    "contracts/jobs/v2/V2Keeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol';\n\nimport '../../interfaces/jobs/v2/IV2Keeper.sol';\nimport '../../interfaces/yearn/IBaseStrategy.sol';\n\ncontract V2Keeper is MachineryReady, IV2Keeper {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  EnumerableSet.AddressSet internal _validJobs;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _mechanicsRegistry) MachineryReady(_mechanicsRegistry) {}\n\n  // Setters\n  function addJobs(address[] calldata _jobs) external override onlyGovernorOrMechanic {\n    for (uint256 i; i < _jobs.length; i++) {\n      _addJob(_jobs[i]);\n    }\n  }\n\n  function addJob(address _job) external override onlyGovernorOrMechanic {\n    _addJob(_job);\n  }\n\n  function _addJob(address _job) internal {\n    _validJobs.add(_job);\n    emit JobAdded(_job);\n  }\n\n  function removeJob(address _job) external override onlyGovernorOrMechanic {\n    _validJobs.remove(_job);\n    emit JobRemoved(_job);\n  }\n\n  // Getters\n  function jobs() public view override returns (address[] memory _jobs) {\n    _jobs = new address[](_validJobs.length());\n    for (uint256 i; i < _validJobs.length(); i++) {\n      _jobs[i] = _validJobs.at(i);\n    }\n  }\n\n  // Jobs functions\n  function tend(address _strategy) external override onlyValidJob {\n    IBaseStrategy(_strategy).tend();\n  }\n\n  function harvest(address _strategy) external override onlyValidJob {\n    IBaseStrategy(_strategy).harvest();\n  }\n\n  modifier onlyValidJob() {\n    require(_validJobs.contains(msg.sender), 'V2Keeper::onlyValidJob:msg-sender-not-valid-job');\n    _;\n  }\n}\n"
    },
    "contracts/jobs/detached/V2DetachedJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol';\n\nimport '../../interfaces/jobs/v2/IV2Keeper.sol';\nimport '../../interfaces/jobs/detached/IV2DetachedJob.sol';\n\nimport '../../interfaces/yearn/IBaseStrategy.sol';\nimport '../../interfaces/oracle/IYOracle.sol';\nimport '../../interfaces/utils/IBaseFee.sol';\n\nabstract contract V2DetachedJob is MachineryReady, IV2DetachedJob {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address public immutable baseFeeOracle;\n\n  address public override v2Keeper;\n\n  address public yOracle;\n\n  EnumerableSet.AddressSet internal _availableStrategies;\n\n  mapping(address => uint256) public requiredAmount;\n  mapping(address => uint256) public lastWorkAt;\n\n  // custom cost oracle calcs\n  mapping(address => address) public costToken;\n  mapping(address => address) public costPair;\n\n  uint256 public workCooldown;\n\n  constructor(\n    address _baseFeeOracle,\n    address _mechanicsRegistry,\n    address _yOracle,\n    address _v2Keeper,\n    uint256 _workCooldown\n  ) MachineryReady(_mechanicsRegistry) {\n    baseFeeOracle = _baseFeeOracle;\n    _setYOracle(_yOracle);\n    v2Keeper = _v2Keeper;\n    if (_workCooldown > 0) _setWorkCooldown(_workCooldown);\n  }\n\n  function setV2Keep3r(address _v2Keeper) external override onlyGovernor {\n    v2Keeper = _v2Keeper;\n  }\n\n  function setYOracle(address _yOracle) external override onlyGovernor {\n    _setYOracle(_yOracle);\n  }\n\n  function _setYOracle(address _yOracle) internal {\n    yOracle = _yOracle;\n  }\n\n  // Setters\n  function setWorkCooldown(uint256 _workCooldown) external override onlyGovernorOrMechanic {\n    _setWorkCooldown(_workCooldown);\n  }\n\n  function _setWorkCooldown(uint256 _workCooldown) internal {\n    if (_workCooldown == 0) revert NotZero();\n    workCooldown = _workCooldown;\n  }\n\n  // Governor\n  function addStrategies(\n    address[] calldata _strategies,\n    uint256[] calldata _requiredAmounts,\n    address[] calldata _costTokens,\n    address[] calldata _costPairs\n  ) external override onlyGovernorOrMechanic {\n    if (_strategies.length != _requiredAmounts.length) revert RequiredAmountsDifferentLength();\n    for (uint256 i; i < _strategies.length; i++) {\n      _addStrategy(_strategies[i], _requiredAmounts[i], _costTokens[i], _costPairs[i]);\n    }\n  }\n\n  function addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address _costToken,\n    address _costPair\n  ) external override onlyGovernorOrMechanic {\n    _addStrategy(_strategy, _requiredAmount, _costToken, _costPair);\n  }\n\n  function _addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address _costToken,\n    address _costPair\n  ) internal {\n    _setRequiredAmount(_strategy, _requiredAmount);\n    _setCostTokenAndPair(_strategy, _costToken, _costPair);\n    emit StrategyAdded(_strategy, _requiredAmount);\n    if (!_availableStrategies.add(_strategy)) revert StrategyAlreadyAdded();\n  }\n\n  function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external override onlyGovernorOrMechanic {\n    if (_strategies.length != _requiredAmounts.length) revert RequiredAmountsDifferentLength();\n    for (uint256 i; i < _strategies.length; i++) {\n      _updateRequiredAmount(_strategies[i], _requiredAmounts[i]);\n    }\n  }\n\n  function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external override onlyGovernorOrMechanic {\n    _updateRequiredAmount(_strategy, _requiredAmount);\n  }\n\n  function _updateRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\n    _setRequiredAmount(_strategy, _requiredAmount);\n    emit StrategyModified(_strategy, _requiredAmount);\n  }\n\n  function updateCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) external override onlyGovernorOrMechanic {\n    _updateCostTokenAndPair(_strategy, _costToken, _costPair);\n  }\n\n  function _updateCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) internal {\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\n    _setCostTokenAndPair(_strategy, _costToken, _costPair);\n  }\n\n  function removeStrategy(address _strategy) external override onlyGovernorOrMechanic {\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\n    delete requiredAmount[_strategy];\n    _availableStrategies.remove(_strategy);\n    emit StrategyRemoved(_strategy);\n  }\n\n  function _setRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\n    requiredAmount[_strategy] = _requiredAmount;\n  }\n\n  function _setCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) internal {\n    costToken[_strategy] = _costToken;\n    costPair[_strategy] = _costPair;\n  }\n\n  // Getters\n  function strategies() public view override returns (address[] memory _strategies) {\n    _strategies = new address[](_availableStrategies.length());\n    for (uint256 i; i < _availableStrategies.length(); i++) {\n      _strategies[i] = _availableStrategies.at(i);\n    }\n  }\n\n  // Keeper view actions (internal)\n  function _workable(address _strategy) internal view virtual returns (bool) {\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\n    if (workCooldown == 0 || block.timestamp > lastWorkAt[_strategy] + workCooldown) return true;\n    return false;\n  }\n\n  // Get eth costs\n  function _getCallCosts(address _strategy) internal view returns (uint256 _callCost) {\n    if (requiredAmount[_strategy] == 0) return 0;\n    uint256 _ethCost = requiredAmount[_strategy] * IBaseFee(baseFeeOracle).basefee_global();\n    if (costToken[_strategy] == address(0)) return _ethCost;\n    return IYOracle(yOracle).getAmountOut(costPair[_strategy], WETH, _ethCost, costToken[_strategy]);\n  }\n\n  // Keep3r actions\n  function _workInternal(address _strategy) internal {\n    if (!_workable(_strategy)) revert NotWorkable();\n\n    _work(_strategy);\n\n    emit Worked(_strategy, msg.sender);\n  }\n\n  function forceWork(address _strategy) external override onlyGovernorOrMechanic {\n    _work(_strategy);\n    emit ForceWorked(_strategy);\n  }\n\n  function _work(address _strategy) internal virtual {}\n}\n"
    },
    "contracts/interfaces/jobs/detached/IV2DetachedJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IV2DetachedJob {\n  error MultiplierExceedsMax();\n  error NotZero();\n  error StrategyAlreadyAdded();\n  error StrategyNotAdded();\n  error RequiredAmountsDifferentLength();\n  error NotWorkable();\n\n  // Setters\n  event StrategyAdded(address _strategy, uint256 _requiredAmount);\n  event StrategyModified(address _strategy, uint256 _requiredAmount);\n  event StrategyRemoved(address _strategy);\n\n  // Actions by Keeper\n  event Worked(address _strategy, address _keeper);\n\n  // Actions forced by governor\n  event ForceWorked(address _strategy);\n\n  // Getters\n  function v2Keeper() external view returns (address _v2Keeper);\n\n  function strategies() external view returns (address[] memory);\n\n  function workable(address _strategy) external view returns (bool);\n\n  // Setters\n  function setV2Keep3r(address _v2Keeper) external;\n\n  function setYOracle(address _v2Keeper) external;\n\n  function setWorkCooldown(uint256 _workCooldown) external;\n\n  function addStrategies(\n    address[] calldata _strategy,\n    uint256[] calldata _requiredAmount,\n    address[] calldata _costTokens,\n    address[] calldata _costPairs\n  ) external;\n\n  function addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address _costToken,\n    address _costPair\n  ) external;\n\n  function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external;\n\n  function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external;\n\n  function updateCostTokenAndPair(\n    address _strategy,\n    address _costToken,\n    address _costPair\n  ) external;\n\n  function removeStrategy(address _strategy) external;\n\n  // Keeper actions\n  function work(address _strategy) external;\n\n  // Mechanics keeper bypass\n  function forceWork(address _strategy) external;\n}\n"
    },
    "contracts/interfaces/utils/IBaseFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IBaseFee {\n  // solhint-disable-next-line func-name-mixedcase\n  function basefee_global() external view returns (uint256 _basefee);\n}\n"
    },
    "contracts/jobs/detached/TendV2DetachedJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport './V2DetachedJob.sol';\n\ncontract TendV2DetachedJob is V2DetachedJob {\n  constructor(\n    address _baseFeeOracle,\n    address _mechanicsRegistry,\n    address _yOracle,\n    address _v2Keeper,\n    uint256 _workCooldown\n  )\n    V2DetachedJob(_baseFeeOracle, _mechanicsRegistry, _yOracle, _v2Keeper, _workCooldown) // solhint-disable-next-line no-empty-blocks\n  {}\n\n  function workable(address _strategy) external view override returns (bool) {\n    return _workable(_strategy);\n  }\n\n  function _workable(address _strategy) internal view override returns (bool) {\n    if (!super._workable(_strategy)) return false;\n    return IBaseStrategy(_strategy).tendTrigger(_getCallCosts(_strategy));\n  }\n\n  function _work(address _strategy) internal override {\n    lastWorkAt[_strategy] = block.timestamp;\n    IV2Keeper(v2Keeper).tend(_strategy);\n  }\n\n  // Keep3r actions\n  function work(address _strategy) external override notPaused {\n    _workInternal(_strategy);\n  }\n}\n"
    },
    "contracts/interfaces/jobs/detached/IV2DetachedGaslessJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../interfaces/jobs/v2/IV2Keeper.sol';\n\ninterface IV2DetachedGaslessJob {\n  error NotZero();\n  error StrategyAlreadyAdded();\n  error StrategyNotAdded();\n  error NotWorkable();\n\n  // Setters\n  event StrategiesAdded(address[] _strategies);\n  event StrategiesRemoved(address[] _strategies);\n\n  // Actions by Keeper\n  event Worked(address _strategy, address _keeper);\n\n  // Actions forced by governor\n  event ForceWorked(address _strategy);\n\n  // Getters\n  function WETH() external view returns (address);\n\n  function V2Keeper() external view returns (IV2Keeper);\n\n  function lastWorkAt(address) external view returns (uint256);\n\n  function workCooldown() external view returns (uint256);\n\n  function callCost() external view returns (uint256);\n\n  function strategies() external view returns (address[] memory);\n\n  function workable(address _strategy) external view returns (bool);\n\n  // Setters\n  function setV2Keep3r(address _v2Keeper) external;\n\n  function setWorkCooldown(uint256 _workCooldown) external;\n\n  function setCallCost(uint256 _callCost) external;\n\n  function addStrategies(address[] calldata _strategy) external;\n\n  function removeStrategies(address[] calldata _strategy) external;\n\n  // Keeper actions\n  function work(address _strategy) external;\n\n  // Mechanics keeper bypass\n  function forceWork(address _strategy) external;\n}\n"
    },
    "contracts/jobs/detached-gasless/V2DetachedGaslessJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/abstract/MachineryReady.sol';\n\nimport '../../interfaces/jobs/detached/IV2DetachedGaslessJob.sol';\n\nabstract contract V2DetachedGaslessJob is MachineryReady, IV2DetachedGaslessJob {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  address public immutable override WETH;\n  IV2Keeper public override V2Keeper;\n\n  EnumerableSet.AddressSet internal _availableStrategies;\n\n  mapping(address => uint256) public override lastWorkAt;\n\n  uint256 public override workCooldown;\n  uint256 public override callCost;\n\n  constructor(\n    address _WETH,\n    address _mechanicsRegistry,\n    address _v2Keeper,\n    uint256 _workCooldown,\n    uint256 _callCost\n  ) MachineryReady(_mechanicsRegistry) {\n    if (_workCooldown > 0) workCooldown = _workCooldown;\n    V2Keeper = IV2Keeper(_v2Keeper);\n    WETH = _WETH;\n    callCost = _callCost;\n  }\n\n  function setV2Keep3r(address _v2Keeper) external override onlyGovernor {\n    V2Keeper = IV2Keeper(_v2Keeper);\n  }\n\n  // Setters\n  function setWorkCooldown(uint256 _workCooldown) external override onlyGovernorOrMechanic {\n    if (_workCooldown == 0) revert NotZero();\n    workCooldown = _workCooldown;\n  }\n\n  function setCallCost(uint256 _callCost) external override onlyGovernorOrMechanic {\n    if (_callCost == 0) revert NotZero();\n    callCost = _callCost;\n  }\n\n  // Governor\n  function addStrategies(address[] calldata _strategies) external override onlyGovernorOrMechanic {\n    for (uint256 i; i < _strategies.length; i++) {\n      if (!_availableStrategies.add(_strategies[i])) revert StrategyAlreadyAdded();\n    }\n    emit StrategiesAdded(_strategies);\n  }\n\n  function removeStrategies(address[] calldata _strategies) external override onlyGovernorOrMechanic {\n    for (uint256 i; i < _strategies.length; i++) {\n      if (!_availableStrategies.remove(_strategies[i])) revert StrategyNotAdded();\n    }\n    emit StrategiesRemoved(_strategies);\n  }\n\n  // Getters\n  function strategies() public view override returns (address[] memory _strategies) {\n    _strategies = _availableStrategies.values();\n  }\n\n  // Keeper view actions (internal)\n  function _workable(address _strategy) internal view virtual returns (bool) {\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\n    if (workCooldown == 0 || block.timestamp > lastWorkAt[_strategy] + workCooldown) return true;\n    return false;\n  }\n\n  // Keeper actions\n  function _workInternal(address _strategy) internal {\n    if (!_workable(_strategy)) revert NotWorkable();\n    _work(_strategy);\n    emit Worked(_strategy, msg.sender);\n  }\n\n  function forceWork(address _strategy) external override onlyGovernorOrMechanic {\n    _work(_strategy);\n    emit ForceWorked(_strategy);\n  }\n\n  function _work(address _strategy) internal virtual {}\n}\n"
    },
    "contracts/jobs/detached-gasless/TendV2DetachedGaslessJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/yearn/IBaseStrategy.sol';\nimport './V2DetachedGaslessJob.sol';\n\ncontract TendV2DetachedGaslessJob is V2DetachedGaslessJob {\n  constructor(\n    address _WETH,\n    address _mechanicsRegistry,\n    address _v2Keeper,\n    uint256 _workCooldown,\n    uint256 _callCost\n  )\n    V2DetachedGaslessJob(_WETH, _mechanicsRegistry, _v2Keeper, _workCooldown, _callCost) // solhint-disable-next-line no-empty-blocks\n  {}\n\n  function workable(address _strategy) external view override returns (bool) {\n    return _workable(_strategy);\n  }\n\n  function _workable(address _strategy) internal view override returns (bool) {\n    if (!super._workable(_strategy)) return false;\n    return IBaseStrategy(_strategy).tendTrigger(callCost);\n  }\n\n  function _work(address _strategy) internal override {\n    lastWorkAt[_strategy] = block.timestamp;\n    V2Keeper.tend(_strategy);\n  }\n\n  // Keep3r actions\n  function work(address _strategy) external override notPaused onlyGovernorOrMechanic {\n    _workInternal(_strategy);\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/mechanics/MechanicsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '../../interfaces/mechanics/IMechanicsRegistry.sol';\nimport '../abstract/UtilsReady.sol';\n\ncontract MechanicsRegistry is UtilsReady, IMechanicsRegistry {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  EnumerableSet.AddressSet internal _mechanics;\n\n  constructor(address _mechanic) {\n    _addMechanic(_mechanic);\n  }\n\n  // Setters\n  function addMechanic(address _mechanic) external override onlyGovernor {\n    _addMechanic(_mechanic);\n  }\n\n  function removeMechanic(address _mechanic) external override onlyGovernor {\n    _removeMechanic(_mechanic);\n  }\n\n  function _addMechanic(address _mechanic) internal {\n    require(_mechanic != address(0), 'MechanicsRegistry::add-mechanic:mechanic-should-not-be-zero-address');\n    require(!_mechanics.contains(_mechanic), 'MechanicsRegistry::add-mechanic:mechanic-already-added');\n    _mechanics.add(_mechanic);\n    emit MechanicAdded(_mechanic);\n  }\n\n  function _removeMechanic(address _mechanic) internal {\n    require(_mechanics.contains(_mechanic), 'MechanicsRegistry::remove-mechanic:mechanic-not-found');\n    _mechanics.remove(_mechanic);\n    emit MechanicRemoved(_mechanic);\n  }\n\n  // View helpers\n  function isMechanic(address mechanic) public view override returns (bool _isMechanic) {\n    return _mechanics.contains(mechanic);\n  }\n\n  // Getters\n  function mechanics() public view override returns (address[] memory _mechanicsList) {\n    _mechanicsList = new address[](_mechanics.length());\n    for (uint256 i; i < _mechanics.length(); i++) {\n      _mechanicsList[i] = _mechanics.at(i);\n    }\n  }\n}\n"
    },
    "contracts/utils/contract-utils.sol": {
      "content": "import '@yearn-mechanics/contract-utils/solidity/contracts/mechanics/MechanicsRegistry.sol';\n\ncontract ContractUtils {\n    \n}\n"
    },
    "contracts/mock/YearnGenericKeep3rV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract GenericKeep3rV2 {\n\n    EnumerableSet.AddressSet internal availableStrategies;\n    mapping(address => uint256) public requiredHarvest;\n    mapping(address => uint256) public requiredTend;\n    address public keep3rHelper;\n    address public slidingOracle;\n\n    address public constant KP3R = address(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() {}\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/abstract/IUtilsReady.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../utils/IGovernable.sol';\nimport '../utils/ICollectableDust.sol';\nimport '../utils/IPausable.sol';\n\ninterface IUtilsReady is IGovernable, ICollectableDust, IPausable {}\n"
    },
    "contracts/interfaces/keep3r/IUniquoteKeep3rEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport '@yearn-mechanics/contract-utils/solidity/interfaces/abstract/IUtilsReady.sol';\n\ninterface IUniquoteKeep3rEscrow is IUtilsReady {\n  function governance() external view returns (address _governance);\n\n  function keep3rV1() external view returns (address _keep3rV1);\n\n  function lpToken() external view returns (address _lpToken);\n\n  function job() external view returns (address _job);\n\n  function keeper() external view returns (address _keeper);\n\n  function returnLPsToGovernance() external;\n\n  function addLiquidityToJob() external;\n\n  function applyCreditToJob() external;\n\n  function unbondLiquidityFromJob() external;\n\n  function removeLiquidityFromJob() external;\n}\n"
    },
    "contracts/interfaces/utils/IGovernableAndManageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '@yearn-mechanics/contract-utils/solidity/contracts/utils/Governable.sol';\nimport '@yearn-mechanics/contract-utils/solidity/contracts/utils/Manageable.sol';\n\ninterface IGovernableAndManageable is IManageable, IGovernable {}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/contracts/utils/Manageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/utils/IManageable.sol';\n\nabstract contract Manageable is IManageable {\n  address public override manager;\n  address public override pendingManager;\n\n  constructor(address _manager) {\n    require(_manager != address(0), 'manageable/manager-should-not-be-zero-address');\n    manager = _manager;\n  }\n\n  function _setPendingManager(address _pendingManager) internal {\n    require(_pendingManager != address(0), 'manageable/pending-manager-should-not-be-zero-addres');\n    pendingManager = _pendingManager;\n    emit PendingManagerSet(_pendingManager);\n  }\n\n  function _acceptManager() internal {\n    manager = pendingManager;\n    pendingManager = address(0);\n    emit ManagerAccepted();\n  }\n\n  function isManager(address _account) public view override returns (bool _isManager) {\n    return _account == manager;\n  }\n\n  modifier onlyManager() {\n    require(isManager(msg.sender), 'manageable/only-manager');\n    _;\n  }\n\n  modifier onlyPendingManager() {\n    require(msg.sender == pendingManager, 'manageable/only-pending-manager');\n    _;\n  }\n}\n"
    },
    "@yearn-mechanics/contract-utils/solidity/interfaces/utils/IManageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IManageable {\n  event PendingManagerSet(address pendingManager);\n  event ManagerAccepted();\n\n  function setPendingManager(address _pendingManager) external;\n\n  function acceptManager() external;\n\n  function manager() external view returns (address _manager);\n\n  function pendingManager() external view returns (address _pendingManager);\n\n  function isManager(address _account) external view returns (bool _isManager);\n}\n"
    },
    "contracts/interfaces/keep3r/IKeep3rEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport '@yearn-mechanics/contract-utils/solidity/interfaces/abstract/IUtilsReady.sol';\n\ninterface IKeep3rEscrow is IUtilsReady {\n  function returnLPsToGovernance() external;\n\n  function addLiquidityToJob(\n    address liquidity,\n    address job,\n    uint256 amount\n  ) external;\n\n  function applyCreditToJob(\n    address provider,\n    address liquidity,\n    address job\n  ) external;\n\n  function unbondLiquidityFromJob(\n    address liquidity,\n    address job,\n    uint256 amount\n  ) external;\n\n  function removeLiquidityFromJob(address liquidity, address job) external;\n}\n"
    },
    "contracts/interfaces/jobs/IKeep3rEscrowJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport '../keep3r/IKeep3rEscrow.sol';\n\ninterface IKeep3rEscrowJob {\n  enum Actions {\n    none,\n    addLiquidityToJob,\n    applyCreditToJob,\n    removeLiquidityFromJob\n  }\n\n  // Actions by Keeper\n  event Worked();\n  // Actions forced by governor\n  event ForceWorked();\n\n  // Governor actions\n  function returnLPsToGovernance(address _escrow) external;\n\n  function addLiquidityToJob(address _escrow) external;\n\n  function applyCreditToJob(address _escrow) external;\n\n  function unbondLiquidityFromJob(address _escrow) external;\n\n  function removeLiquidityFromJob(address _escrow) external;\n\n  // Governor utils bypass\n  function setPendingGovernorOnEscrow(address _escrow, address _pendingGovernor) external;\n\n  function acceptGovernorOnEscrow(address _escrow) external;\n\n  function sendDustOnEscrow(\n    address _escrow,\n    address _to,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  // Getters\n  function getNextAction() external view returns (IKeep3rEscrow Escrow, Actions _action);\n\n  // Governor work bypass\n  function forceWork() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mock/ERC20Token.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.4;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Token is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _mintAmount\n    ) ERC20(_name, _symbol) {\n        _mint(msg.sender, _mintAmount);\n    }\n}\n"
    },
    "contracts/mock/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract ERC20Mock is ERC20 {\n  uint8 private _decimals;\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint8 __decimals,\n    address _initialAccount,\n    uint256 _initialBalance\n  ) payable ERC20(_name, _symbol) {\n    _decimals = __decimals;\n    if (_initialBalance > 0) {\n      _mint(_initialAccount, _initialBalance);\n    }\n  }\n\n  function mint(address _account, uint256 _amount) external {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) external {\n    _burn(_account, _amount);\n  }\n\n  function transferInternal(\n    address _from,\n    address _to,\n    uint256 _value\n  ) external {\n    _transfer(_from, _to, _value);\n  }\n\n  function approveInternal(\n    address _owner,\n    address _spender,\n    uint256 _value\n  ) external {\n    _approve(_owner, _spender, _value);\n  }\n\n  function decimals() public view virtual override returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/interfaces/keep3r/IStrategyKeep3r.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport '@yearn-mechanics/contract-utils/solidity/interfaces/keep3r/IKeep3r.sol';\n\ninterface IStrategyKeep3r is IKeep3r {\n  // Actions by Keeper\n  event HarvestByKeeper(address _strategy);\n  // Actions forced by governance\n  event HarvestByGovernor(address _strategy);\n\n  // Keep3r actions\n  function harvest(address _strategy) external;\n\n  // Governance Keeper bypass\n  function forceHarvest(address _strategy) external;\n}\n"
    },
    "contracts/interfaces/yearn/IVaultAPI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nstruct StrategyParams {\n  uint256 performanceFee;\n  uint256 activation;\n  uint256 debtRatio;\n  uint256 rateLimit;\n  uint256 lastReport;\n  uint256 totalDebt;\n  uint256 totalGain;\n  uint256 totalLoss;\n}\n\ninterface VaultAPI is IERC20 {\n  function apiVersion() external view returns (string memory);\n\n  function withdraw(uint256 shares, address recipient) external;\n\n  function token() external view returns (address);\n\n  function totalAssets() external view returns (uint256);\n\n  function strategies(address _strategy) external view returns (StrategyParams memory);\n\n  /**\n   * View how much the Vault would increase this Strategy's borrow limit,\n   * based on its present performance (since its last report). Can be used to\n   * determine expectedReturn in your Strategy.\n   */\n  function creditAvailable(address _strategy) external view returns (uint256);\n\n  /**\n   * View how much the Vault would like to pull back from the Strategy,\n   * based on its present performance (since its last report). Can be used to\n   * determine expectedReturn in your Strategy.\n   */\n  function debtOutstanding() external view returns (uint256);\n\n  /**\n   * View how much the Vault expect this Strategy to return at the current\n   * block, based on its present performance (since its last report). Can be\n   * used to determine expectedReturn in your Strategy.\n   */\n  function expectedReturn() external view returns (uint256);\n\n  /**\n   * This is the main contact point where the Strategy interacts with the\n   * Vault. It is critical that this call is handled as intended by the\n   * Strategy. Therefore, this function will be called by BaseStrategy to\n   * make sure the integration is correct.\n   */\n  function report(\n    uint256 _gain,\n    uint256 _loss,\n    uint256 _debtPayment\n  ) external returns (uint256);\n\n  /**\n   * This function should only be used in the scenario where the Strategy is\n   * being retired but no migration of the positions are possible, or in the\n   * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n   * mode in order for it to exit as quickly as possible. The latter scenario\n   * could be for any reason that is considered \"critical\" that the Strategy\n   * exits its position as fast as possible, such as a sudden change in\n   * market conditions leading to losses, or an imminent failure in an\n   * external dependency.\n   */\n  function revokeStrategy() external;\n\n  /**\n   * View the governance address of the Vault to assert privileged functions\n   * can only be called by governance. The Strategy serves the Vault, so it\n   * is subject to governance defined by the Vault.\n   */\n  function governance() external view returns (address);\n}\n"
    },
    "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/yearn/IBaseStrategy.sol';\nimport './V2DetachedGaslessJob.sol';\n\ncontract HarvestV2DetachedGaslessJob is V2DetachedGaslessJob {\n  constructor(\n    address _WETH,\n    address _mechanicsRegistry,\n    address _v2Keeper,\n    uint256 _workCooldown,\n    uint256 _callCost\n  )\n    V2DetachedGaslessJob(_WETH, _mechanicsRegistry, _v2Keeper, _workCooldown, _callCost) // solhint-disable-next-line no-empty-blocks\n  {}\n\n  function workable(address _strategy) external view override returns (bool) {\n    return _workable(_strategy);\n  }\n\n  function _workable(address _strategy) internal view override returns (bool) {\n    if (!super._workable(_strategy)) return false;\n    return IBaseStrategy(_strategy).harvestTrigger(callCost);\n  }\n\n  function _work(address _strategy) internal override {\n    lastWorkAt[_strategy] = block.timestamp;\n    V2Keeper.harvest(_strategy);\n  }\n\n  // Keep3r actions\n  function work(address _strategy) external override notPaused onlyGovernorOrMechanic {\n    _workInternal(_strategy);\n  }\n}\n"
    },
    "contracts/jobs/detached/HarvestV2DetachedJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport './V2DetachedJob.sol';\n\ncontract HarvestV2DetachedJob is V2DetachedJob {\n  constructor(\n    address _baseFeeOracle,\n    address _mechanicsRegistry,\n    address _yOracle,\n    address _v2Keeper,\n    uint256 _workCooldown\n  )\n    V2DetachedJob(_baseFeeOracle, _mechanicsRegistry, _yOracle, _v2Keeper, _workCooldown) // solhint-disable-next-line no-empty-blocks\n  {}\n\n  function workable(address _strategy) external view override returns (bool) {\n    return _workable(_strategy);\n  }\n\n  function _workable(address _strategy) internal view override returns (bool) {\n    if (!super._workable(_strategy)) return false;\n    return IBaseStrategy(_strategy).harvestTrigger(_getCallCosts(_strategy));\n  }\n\n  function _work(address _strategy) internal override {\n    lastWorkAt[_strategy] = block.timestamp;\n    IV2Keeper(v2Keeper).harvest(_strategy);\n  }\n\n  // Keep3r actions\n  function work(address _strategy) external override notPaused {\n    _workInternal(_strategy);\n  }\n}\n"
    },
    "contracts/interfaces/oracle/IPartialKeep3rV1OracleJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport '../../interfaces/jobs/IKeep3rJob.sol';\n\ninterface IPartialKeep3rV1OracleJob is IKeep3rJob {\n  event PairAdded(address _pair);\n  event PairRemoved(address _pair);\n\n  // Actions by Keeper\n  event Worked(address _pair, address _keeper, uint256 _credits);\n\n  // Actions forced by Governor\n  event ForceWorked(address _pair);\n\n  // Setters\n  function addPairs(address[] calldata _pairs) external;\n\n  function addPair(address _pair) external;\n\n  function removePair(address _pair) external;\n\n  // Getters\n  function oracleBondedKeeper() external view returns (address _oracleBondedKeeper);\n\n  function workable(address _pair) external view returns (bool);\n\n  function pairs() external view returns (address[] memory _pairs);\n\n  // Keeper actions\n  function work(address _pair) external returns (uint256 _credits);\n\n  // Mechanics keeper bypass\n  function forceWork(address _pair) external;\n}\n"
    },
    "contracts/interfaces/jobs/v2/IV2QueueKeep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\nimport '../IKeep3rJob.sol';\n\ninterface IV2QueueKeep3rJob is IKeep3rJob {\n  // event Keep3rSet(address keep3r);\n\n  // Setters\n  event StrategyAdded(address _strategy);\n  event StrategyRemoved(address _strategy);\n\n  // Actions by Keeper\n  event Worked(address _strategy, address _keeper, uint256 _credits);\n\n  // Actions forced by governor\n  event ForceWorked(address _strategy);\n\n  // Getters\n  function fastGasOracle() external view returns (address _fastGasOracle);\n\n  function strategies() external view returns (address[] memory);\n\n  function strategyQueueList(address _strategy) external view returns (address[] memory _strategies);\n\n  function workable(address _strategy) external view returns (bool);\n\n  // Setters\n  function setV2Keep3r(address _v2Keeper) external;\n\n  function setFastGasOracle(address _fastGasOracle) external;\n\n  function setWorkCooldown(uint256 _workCooldown) external;\n\n  function setStrategy(\n    address _strategy,\n    address[] calldata _strategies,\n    uint256[] calldata _requiredAmounts\n  ) external;\n\n  function removeStrategy(address _strategy) external;\n\n  // Keeper actions\n  function work(address _strategy) external returns (uint256 _credits);\n\n  // Mechanics keeper bypass\n  function forceWork(address _strategy) external;\n\n  function forceWorkUnsafe(address _strategy) external;\n}\n"
    },
    "contracts/interfaces/jobs/v2/IV2MultiQueueKeep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\nimport '../IKeep3rJob.sol';\n\ninterface IV2MultiQueueKeep3rJob is IKeep3rJob {\n  // event Keep3rSet(address keep3r);\n\n  // Setters\n  event StrategyAdded(address _strategy);\n  event StrategyRemoved(address _strategy);\n\n  // Actions by Keeper\n  event Worked(address _strategy, uint256 _workAmount, address _keeper, uint256 _credits);\n\n  // Actions forced by governor\n  event ForceWorked(address _strategy);\n\n  // Getters\n  function fastGasOracle() external view returns (address _fastGasOracle);\n\n  function strategies() external view returns (address[] memory);\n\n  function strategyQueueList(address _strategy) external view returns (address[] memory _strategies);\n\n  function workable(address _strategy, uint256 _workAmount) external view returns (bool);\n\n  // Setters\n  function setV2Keep3r(address _v2Keeper) external;\n\n  function setFastGasOracle(address _fastGasOracle) external;\n\n  function setWorkCooldown(uint256 _workCooldown) external;\n\n  function addStrategy(\n    address _strategy,\n    uint256 _requiredAmount,\n    address[] calldata _strategies,\n    uint256[] calldata _requiredAmounts,\n    uint256 _workResetCooldown\n  ) external;\n\n  function removeStrategy(address _strategy) external;\n\n  // Keeper actions\n  function work(address _strategy, uint256 _workAmount) external returns (uint256 _credits);\n\n  // Mechanics keeper bypass\n  function forceWork(address _strategy) external;\n\n  function forceWork(address _strategy, uint256 _workAmount) external;\n}\n"
    },
    "contracts/interfaces/jobs/IVaultKeep3rJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport './IKeep3rJob.sol';\n\ninterface IVaultKeep3rJob is IKeep3rJob {\n  event VaultAdded(address _vault, uint256 _requiredEarn);\n  event VaultModified(address _vault, uint256 _requiredEarn);\n  event VaultRemoved(address _vault);\n\n  // Actions by Keeper\n  event Worked(address _vault, address _keeper, uint256 _credits);\n\n  // Actions forced by Governor\n  event ForceWorked(address _vault);\n\n  // Setters\n  function addVaults(address[] calldata _vaults, uint256[] calldata _requiredEarns) external;\n\n  function addVault(address _vault, uint256 _requiredEarn) external;\n\n  function updateVaults(address[] calldata _vaults, uint256[] calldata _requiredEarns) external;\n\n  function updateVault(address _vault, uint256 _requiredEarn) external;\n\n  function removeVault(address _vault) external;\n\n  function setEarnCooldown(uint256 _earnCooldown) external;\n\n  // Getters\n  function workable(address _vault) external returns (bool);\n\n  function vaults() external view returns (address[] memory _vaults);\n\n  function calculateEarn(address _vault) external view returns (uint256 _amount);\n\n  // Keeper actions\n  function work(address _vault) external returns (uint256 _credits);\n\n  // Mechanics keeper bypass\n  function forceWork(address _vault) external;\n}\n"
    },
    "contracts/interfaces/jobs/v2/IV2Keep3rStealthJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.8;\n\ninterface IV2Keep3rStealthJob {\n  function forceWorkUnsafe(address _strategy) external;\n}\n"
    },
    "contracts/interfaces/gnosis/IGnosisSafe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Enum {\n  enum Operation {\n    Call,\n    DelegateCall\n  }\n}\n\ninterface GnosisSafe {\n  function getOwners() external view returns (address[] memory);\n\n  function execTransaction(\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint8 operation,\n    uint256 safeTxGas,\n    uint256 dataGas,\n    uint256 gasPrice,\n    address gasToken,\n    address refundReceiver,\n    bytes calldata signatures\n  ) external payable;\n}\n\ninterface IGuard {\n  function checkTransaction(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation,\n    uint256 safeTxGas,\n    uint256 baseGas,\n    uint256 gasPrice,\n    address gasToken,\n    address payable refundReceiver,\n    bytes memory signatures,\n    address msgSender\n  ) external;\n\n  function checkAfterExecution(bytes32, bool) external view;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}