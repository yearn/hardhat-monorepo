{
  "address": "0x57419Fb50Fa588Fc165AcC26449B2Bf4C7731458",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_v2Keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_workCooldown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_callCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotWorkable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotAdded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "ForceWorked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "StrategiesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "StrategiesRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "Worked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "V2Keeper",
      "outputs": [
        {
          "internalType": "contract IV2Keeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "addStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "forceWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanic",
          "type": "address"
        }
      ],
      "name": "isMechanic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isMechanic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastWorkAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mechanicsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "_mechanicRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "removeStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_callCost",
          "type": "uint256"
        }
      ],
      "name": "setCallCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        }
      ],
      "name": "setMechanicsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_v2Keeper",
          "type": "address"
        }
      ],
      "name": "setV2Keep3r",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_workCooldown",
          "type": "uint256"
        }
      ],
      "name": "setWorkCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "work",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "workable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xff321541605f30009b1229c660a5ab8bbfc3fd0f9142be4640610c45eeac6f64",
  "receipt": {
    "to": null,
    "from": "0xB82193725471dC7bfaAB1a3AB93c7b42963F3265",
    "contractAddress": "0x57419Fb50Fa588Fc165AcC26449B2Bf4C7731458",
    "transactionIndex": 1,
    "gasUsed": "1420111",
    "logsBloom": "0x
    "blockHash": "0x00014073000001b3fed52da75d1147a64fe2b43cfa8e3eddb659a1d91f74ade2",
    "transactionHash": "0xff321541605f30009b1229c660a5ab8bbfc3fd0f9142be4640610c45eeac6f64",
    "logs": [],
    "blockNumber": 31002016,
    "cumulativeGasUsed": "1484547",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x7f462B92F92114A2D57A03e5Ae2DB5DA28b77d73",
    "0xe72d641f09a48cce6997377d13b2Ac7029c642b2",
    1800,
    "500000000000000000"
  ],
  "solcInputHash": "e04cadd035eed72eb28af69d4ecbc8fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v2Keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_workCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotWorkable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotAdded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"ForceWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"StrategiesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"StrategiesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2Keeper\",\"outputs\":[{\"internalType\":\"contract IV2Keeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"forceWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanic\",\"type\":\"address\"}],\"name\":\"isMechanic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMechanic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWorkAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mechanicsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"removeStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_callCost\",\"type\":\"uint256\"}],\"name\":\"setCallCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"}],\"name\":\"setMechanicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v2Keeper\",\"type\":\"address\"}],\"name\":\"setV2Keep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workCooldown\",\"type\":\"uint256\"}],\"name\":\"setWorkCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol\":\"HarvestV2DetachedGaslessJob\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/abstract/MachineryReady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './UtilsReady.sol';\\nimport '../utils/Machinery.sol';\\n\\nabstract contract MachineryReady is UtilsReady, Machinery {\\n  constructor(address _mechanicsRegistry) Machinery(_mechanicsRegistry) UtilsReady() {}\\n\\n  // Machinery: restricted-access\\n  function setMechanicsRegistry(address _mechanicsRegistry) external override onlyGovernor {\\n    _setMechanicsRegistry(_mechanicsRegistry);\\n  }\\n\\n  // Machinery: modifiers\\n  modifier onlyGovernorOrMechanic() {\\n    require(isGovernor(msg.sender) || isMechanic(msg.sender), 'Machinery::onlyGovernorOrMechanic:invalid-msg-sender');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x33ba8028b79123f1c900753b9d6a9074701bed0636f86a8859f7553f98028bbf\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/abstract/UtilsReady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../utils/Governable.sol';\\nimport '../utils/CollectableDust.sol';\\nimport '../utils/Pausable.sol';\\n\\nabstract contract UtilsReady is Governable, CollectableDust, Pausable {\\n  constructor() Governable(msg.sender) {}\\n\\n  // Governable: restricted-access\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  // Collectable Dust: restricted-access\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n\\n  // Pausable: restricted-access\\n  function pause(bool _paused) external override onlyGovernor {\\n    _pause(_paused);\\n  }\\n}\\n\",\"keccak256\":\"0x6bfc74c3d14aa6b6a3858dd8f6aa1ef1a093a887a27e7e23c3facc2e143d8f62\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/mechanics/IMechanicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IMechanicsRegistry {\\n  event MechanicAdded(address _mechanic);\\n  event MechanicRemoved(address _mechanic);\\n\\n  function addMechanic(address _mechanic) external;\\n\\n  function removeMechanic(address _mechanic) external;\\n\\n  function mechanics() external view returns (address[] memory _mechanicsList);\\n\\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n}\\n\",\"keccak256\":\"0xea99a72ea91a0948f7aa3cee28a68848da56f9d3027aaa40ae37eb5e3046e0fd\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/ICollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0b1bb0c71f8adb4466b264d4bde216afb9abe3f17e504cd544a8c378f6a5cab8\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  function acceptGovernor() external;\\n\\n  function governor() external view returns (address _governor);\\n\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n}\\n\",\"keccak256\":\"0xf73672943bc49e4b24ef05e08173ce64ee2dbac48558a330fc836e707035893d\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/IMachinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IMachinery {\\n  // View helpers\\n  function mechanicsRegistry() external view returns (address _mechanicsRegistry);\\n\\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n  // Setters\\n  function setMechanicsRegistry(address _mechanicsRegistry) external;\\n}\\n\",\"keccak256\":\"0xdf1def1edf0114646cbb16bd56448a1317fc1f4616b121ab5d69d92b725a08ca\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/interfaces/utils/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IPausable {\\n  event Paused(bool _paused);\\n\\n  function pause(bool _paused) external;\\n}\\n\",\"keccak256\":\"0x912f694f4fec0a281528590c9a860a488e5a593a4d4033e372a4b116d4a989b3\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/CollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/utils/ICollectableDust.sol';\\n\\nabstract contract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x54bfb72dbb983714f5e5273d5a0965409bb7ad370e387a4abb8cf753028e74c8\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/utils/IGovernable.sol';\\n\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external virtual override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == governor;\\n  }\\n\\n  modifier onlyGovernor() {\\n    require(isGovernor(msg.sender), 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x67c9115239b7816bacb5a0efd34b44f0e19d973ddc2ba82c51457d1c3675ba2c\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/Machinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '../interfaces/utils/IMachinery.sol';\\nimport '../interfaces/mechanics/IMechanicsRegistry.sol';\\n\\ncontract Machinery is IMachinery {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IMechanicsRegistry internal _mechanicsRegistry;\\n\\n  constructor(address __mechanicsRegistry) {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  modifier onlyMechanic() {\\n    require(_mechanicsRegistry.isMechanic(msg.sender), 'Machinery: not mechanic');\\n    _;\\n  }\\n\\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  function _setMechanicsRegistry(address __mechanicsRegistry) internal {\\n    _mechanicsRegistry = IMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  // View helpers\\n  function mechanicsRegistry() external view override returns (address _mechanicRegistry) {\\n    return address(_mechanicsRegistry);\\n  }\\n\\n  function isMechanic(address _mechanic) public view override returns (bool _isMechanic) {\\n    return _mechanicsRegistry.isMechanic(_mechanic);\\n  }\\n}\\n\",\"keccak256\":\"0xfccb336a8d75b6e47683c11ea48394021bb1b37762ec62f31eb208bda64550f3\",\"license\":\"MIT\"},\"@yearn/contract-utils/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/utils/IPausable.sol';\\n\\nabstract contract Pausable is IPausable {\\n  bool public paused;\\n\\n  constructor() {}\\n\\n  modifier notPaused() {\\n    require(!paused, 'paused');\\n    _;\\n  }\\n\\n  function _pause(bool _paused) internal {\\n    require(paused != _paused, 'no-change');\\n    paused = _paused;\\n    emit Paused(_paused);\\n  }\\n}\\n\",\"keccak256\":\"0x6ac5f8063d1413d2ca21eecc363c8493dd0ff48e7a5bcbbb54de12ee99a8f611\",\"license\":\"MIT\"},\"contracts/interfaces/jobs/detached/IV2DetachedGaslessJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../../../interfaces/jobs/v2/IV2Keeper.sol';\\n\\ninterface IV2DetachedGaslessJob {\\n  error NotZero();\\n  error StrategyAlreadyAdded();\\n  error StrategyNotAdded();\\n  error NotWorkable();\\n\\n  // Setters\\n  event StrategiesAdded(address[] _strategies);\\n  event StrategiesRemoved(address[] _strategies);\\n\\n  // Actions by Keeper\\n  event Worked(address _strategy, address _keeper);\\n\\n  // Actions forced by governor\\n  event ForceWorked(address _strategy);\\n\\n  // Getters\\n  function WETH() external view returns (address);\\n\\n  function V2Keeper() external view returns (IV2Keeper);\\n\\n  function lastWorkAt(address) external view returns (uint256);\\n\\n  function workCooldown() external view returns (uint256);\\n\\n  function callCost() external view returns (uint256);\\n\\n  function strategies() external view returns (address[] memory);\\n\\n  function workable(address _strategy) external view returns (bool);\\n\\n  // Setters\\n  function setV2Keep3r(address _v2Keeper) external;\\n\\n  function setWorkCooldown(uint256 _workCooldown) external;\\n\\n  function setCallCost(uint256 _callCost) external;\\n  \\n  function addStrategies(\\n    address[] calldata _strategy\\n  ) external;\\n\\n  function removeStrategies(address[] calldata _strategy) external;\\n\\n  // Keeper actions\\n  function work(address _strategy) external;\\n\\n  // Mechanics keeper bypass\\n  function forceWork(address _strategy) external;\\n}\\n\",\"keccak256\":\"0xaa06ca905287c300bc92c960544c291aa8fe956c6719f6531b61adbc9714d210\",\"license\":\"MIT\"},\"contracts/interfaces/jobs/v2/IV2Keeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IV2Keeper {\\n  // Getters\\n  function jobs() external view returns (address[] memory);\\n\\n  event JobAdded(address _job);\\n  event JobRemoved(address _job);\\n\\n  // Setters\\n  function addJobs(address[] calldata _jobs) external;\\n\\n  function addJob(address _job) external;\\n\\n  function removeJob(address _job) external;\\n\\n  // Jobs actions\\n  function tend(address _strategy) external;\\n\\n  function harvest(address _strategy) external;\\n}\\n\",\"keccak256\":\"0xdb7e3afc3d6d75a61ed21f4bf8150d5739cc243e290b713fc32cbd59426d05ca\",\"license\":\"MIT\"},\"contracts/interfaces/yearn/IBaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBaseStrategy {\\n  function vault() external view returns (address _vault);\\n\\n  function strategist() external view returns (address _strategist);\\n\\n  function rewards() external view returns (address _rewards);\\n\\n  function keeper() external view returns (address _keeper);\\n\\n  function want() external view returns (address _want);\\n\\n  function name() external view returns (string memory _name);\\n\\n  function profitFactor() external view returns (uint256 _profitFactor);\\n\\n  function maxReportDelay() external view returns (uint256 _maxReportDelay);\\n\\n  // custom view\\n  function crv() external view returns (address _crv);\\n\\n  // Setters\\n  function setStrategist(address _strategist) external;\\n\\n  function setKeeper(address _keeper) external;\\n\\n  function setRewards(address _rewards) external;\\n\\n  function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n  function tend() external;\\n\\n  function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n  function harvest() external;\\n\\n  function setBorrowCollateralizationRatio(uint256 _c) external;\\n}\\n\",\"keccak256\":\"0x09bb17250c7c0c9af4a61b26c64cd97d0226a64b678d90bd3fd2449de185997e\",\"license\":\"MIT\"},\"contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../../interfaces/yearn/IBaseStrategy.sol';\\nimport './V2DetachedGaslessJob.sol';\\n\\ncontract HarvestV2DetachedGaslessJob is V2DetachedGaslessJob {\\n  constructor(\\n    address _WETH,\\n    address _mechanicsRegistry,\\n    address _v2Keeper,\\n    uint256 _workCooldown,\\n    uint256 _callCost\\n  )\\n    V2DetachedGaslessJob(_WETH, _mechanicsRegistry, _v2Keeper, _workCooldown, _callCost) // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  function workable(address _strategy) external view override returns (bool) {\\n    return _workable(_strategy);\\n  }\\n\\n  function _workable(address _strategy) internal view override returns (bool) {\\n    if (!super._workable(_strategy)) return false;\\n    return IBaseStrategy(_strategy).harvestTrigger(callCost);\\n  }\\n\\n  function _work(address _strategy) internal override {\\n    lastWorkAt[_strategy] = block.timestamp;\\n    V2Keeper.harvest(_strategy);\\n  }\\n\\n  // Keep3r actions\\n  function work(address _strategy) external override notPaused onlyGovernorOrMechanic {\\n    _workInternal(_strategy);\\n  }\\n}\\n\",\"keccak256\":\"0x8a940e5313739c2851de4f5774a5b74ba0c79ddd8522a0537122f8643c3752f8\",\"license\":\"MIT\"},\"contracts/jobs/detached-gasless/V2DetachedGaslessJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@yearn/contract-utils/contracts/abstract/MachineryReady.sol';\\n\\nimport '../../interfaces/jobs/detached/IV2DetachedGaslessJob.sol';\\n\\nabstract contract V2DetachedGaslessJob is MachineryReady, IV2DetachedGaslessJob {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public override immutable WETH;\\n  IV2Keeper public override V2Keeper;\\n\\n  EnumerableSet.AddressSet internal _availableStrategies;\\n\\n  mapping(address => uint256) public override lastWorkAt;\\n\\n  uint256 public override workCooldown;\\n  uint256 public override callCost;\\n\\n  constructor(\\n    address _WETH,\\n    address _mechanicsRegistry,\\n    address _v2Keeper,\\n    uint256 _workCooldown,\\n    uint256 _callCost\\n  ) MachineryReady(_mechanicsRegistry) {\\n    if (_workCooldown > 0) workCooldown = _workCooldown;\\n    V2Keeper = IV2Keeper(_v2Keeper);\\n    WETH = _WETH;\\n    callCost = _callCost;\\n  }\\n\\n  function setV2Keep3r(address _v2Keeper) external override onlyGovernor {\\n    V2Keeper = IV2Keeper(_v2Keeper);\\n  }\\n\\n  // Setters\\n  function setWorkCooldown(uint256 _workCooldown) external override onlyGovernorOrMechanic {\\n    if (_workCooldown == 0) revert NotZero();\\n    workCooldown = _workCooldown;\\n  }\\n\\n  function setCallCost(uint256 _callCost) external override onlyGovernorOrMechanic {\\n    if (_callCost == 0) revert NotZero();\\n    callCost = _callCost;\\n  }\\n\\n  // Governor\\n  function addStrategies(\\n    address[] calldata _strategies\\n  ) external override onlyGovernorOrMechanic {\\n    for (uint256 i; i < _strategies.length; i++) {\\n      if (!_availableStrategies.add(_strategies[i])) revert StrategyAlreadyAdded();\\n    }\\n    emit StrategiesAdded(_strategies);\\n  }\\n\\n  function removeStrategies(address[] calldata _strategies) external override onlyGovernorOrMechanic {\\n    for (uint256 i; i < _strategies.length; i++) {\\n      if (!_availableStrategies.remove(_strategies[i])) revert StrategyNotAdded();\\n    }\\n    emit StrategiesRemoved(_strategies);\\n  }\\n\\n  // Getters\\n  function strategies() public view override returns (address[] memory _strategies) {\\n    _strategies = _availableStrategies.values();\\n  }\\n\\n  // Keeper view actions (internal)\\n  function _workable(address _strategy) internal view virtual returns (bool) {\\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\\n    if (workCooldown == 0 || block.timestamp > lastWorkAt[_strategy] + workCooldown) return true;\\n    return false;\\n  }\\n\\n  // Keeper actions\\n  function _workInternal(address _strategy) internal {\\n    if (!_workable(_strategy)) revert NotWorkable();\\n    _work(_strategy);\\n    emit Worked(_strategy, msg.sender);\\n  }\\n\\n  function forceWork(address _strategy) external override onlyGovernorOrMechanic {\\n    _work(_strategy);\\n    emit ForceWorked(_strategy);\\n  }\\n\\n  function _work(address _strategy) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7092614d2ae4ef730aa41a44942818c98815d11b60866609430eb8de8bec649c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620018733803806200187383398101604081905262000034916200013f565b848484848483803380620000a55760405162461bcd60e51b815260206004820152602e60248201527f676f7665726e61626c652f676f7665726e6f722d73686f756c642d6e6f742d6260448201526d652d7a65726f2d6164647265737360901b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b039283161790556004805491831661010002610100600160a81b031990921691909117905550508115620000ee5760098290555b600580546001600160a01b0319166001600160a01b03948516179055939091166080525050600a55506200019c9350505050565b80516001600160a01b03811681146200013a57600080fd5b919050565b600080600080600060a086880312156200015857600080fd5b620001638662000122565b9450620001736020870162000122565b9350620001836040870162000122565b6060870151608090970151959894975095949392505050565b6080516116bb620001b860003960006102fa01526116bb6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639f471303116100de578063e06a7cb911610097578063e43581b811610071578063e43581b814610386578063e58bb639146103a8578063ef47da6d146103b0578063f235757f146103c357600080fd5b8063e06a7cb914610357578063e1c5b39514610360578063e3056a341461037357600080fd5b80639f471303146102c7578063a734f06e146102da578063ad5c4648146102f5578063c0c0b6021461031c578063d9f9027f1461032f578063dd7ba4201461034457600080fd5b806334d6020d1161014b57806365834acc1161012557806365834acc1461027b57806370814eeb1461028e57806374c2ca83146102a157806382376a99146102b457600080fd5b806334d6020d1461023857806336df7ea51461024b5780635c975abb1461025e57600080fd5b806302329a291461019357806304146a39146101a85780630c340a24146101c457806310262803146101ef5780631078f3881461020f5780632db8c12914610225575b600080fd5b6101a66101a136600461131b565b6103d6565b005b6101b1600a5481565b6040519081526020015b60405180910390f35b6000546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020016101bb565b6101b16101fd366004611354565b60086020526000908152604090205481565b60045461010090046001600160a01b03166101d7565b6101a661023336600461136f565b610415565b6005546101d7906001600160a01b031681565b6101a6610259366004611354565b61044f565b60045461026b9060ff1681565b60405190151581526020016101bb565b61026b610289366004611354565b6104cd565b6101a661029c3660046113ab565b61055d565b6101a66102af366004611420565b610640565b6101a66102c2366004611354565b61069b565b61026b6102d5366004611354565b6106e7565b6101d773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101d77f000000000000000000000000000000000000000000000000000000000000000081565b6101a661032a3660046113ab565b6106f2565b6103376107c9565b6040516101bb9190611439565b6101a6610352366004611354565b6107da565b6101b160095481565b6101a661036e366004611420565b61085c565b6001546101d7906001600160a01b031681565b61026b610394366004611354565b6000546001600160a01b0391821691161490565b6101a66108b7565b6101a66103be366004611354565b61091b565b6101a66103d1366004611354565b610968565b6000546001600160a01b031633146104095760405162461bcd60e51b815260040161040090611486565b60405180910390fd5b6104128161099b565b50565b6000546001600160a01b0316331461043f5760405162461bcd60e51b815260040161040090611486565b61044a838383610a21565b505050565b60045460ff161561048b5760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b6044820152606401610400565b6000546001600160a01b03163314806104a857506104a8336104cd565b6104c45760405162461bcd60e51b8152600401610400906114bd565b61041281610bc3565b60048054604051631960d2b360e21b81526001600160a01b0384811693820193909352600092610100909204909116906365834acc906024015b60206040518083038186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190611511565b92915050565b6000546001600160a01b031633148061057a575061057a336104cd565b6105965760405162461bcd60e51b8152600401610400906114bd565b60005b81811015610602576105d38383838181106105b6576105b661152e565b90506020020160208101906105cb9190611354565b600690610c30565b6105f057604051638716f5eb60e01b815260040160405180910390fd5b806105fa8161155a565b915050610599565b507fa52141b1b38605c552bd988329fd94c9f42979f3b8ca555f875962960a6d55a68282604051610634929190611575565b60405180910390a15050565b6000546001600160a01b031633148061065d575061065d336104cd565b6106795760405162461bcd60e51b8152600401610400906114bd565b80610696576040516252b55360e31b815260040160405180910390fd5b600955565b6000546001600160a01b031633146106c55760405162461bcd60e51b815260040161040090611486565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061055782610c4c565b6000546001600160a01b031633148061070f575061070f336104cd565b61072b5760405162461bcd60e51b8152600401610400906114bd565b60005b818110156107975761076883838381811061074b5761074b61152e565b90506020020160208101906107609190611354565b600690610c94565b6107855760405163165e236760e01b815260040160405180910390fd5b8061078f8161155a565b91505061072e565b507fa7e35176a12cd26c4faa0cd1d742d768c473cd6a40fb4a7d377fb8fc9b836ec98282604051610634929190611575565b60606107d56006610ca9565b905090565b6000546001600160a01b03163314806107f757506107f7336104cd565b6108135760405162461bcd60e51b8152600401610400906114bd565b61081c81610cb6565b6040516001600160a01b03821681527fee8d688761ac1d0fda49e2ac999f0e46b3beaf16857a8e8905aeab2987dc8d38906020015b60405180910390a150565b6000546001600160a01b03163314806108795750610879336104cd565b6108955760405162461bcd60e51b8152600401610400906114bd565b806108b2576040516252b55360e31b815260040160405180910390fd5b600a55565b6001546001600160a01b031633146109115760405162461bcd60e51b815260206004820181905260248201527f676f7665726e61626c652f6f6e6c792d70656e64696e672d676f7665726e6f726044820152606401610400565b610919610d2d565b565b6000546001600160a01b031633146109455760405162461bcd60e51b815260040161040090611486565b60048054610100600160a81b0319166101006001600160a01b0384160217905550565b6000546001600160a01b031633146109925760405162461bcd60e51b815260040161040090611486565b61041281610d7d565b60045460ff16151581151514156109e05760405162461bcd60e51b81526020600482015260096024820152686e6f2d6368616e676560b81b6044820152606401610400565b6004805460ff19168215159081179091556040519081527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd290602001610851565b6001600160a01b038316610a8f5760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b6064820152608401610400565b610a9a600283610e3f565b15610afe5760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b6064820152608401610400565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b5f576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610b59573d6000803e3d6000fd5b50610b73565b610b736001600160a01b0383168483610e61565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b610bcc81610c4c565b610be957604051630efd608960e21b815260040160405180910390fd5b610bf281610cb6565b604080516001600160a01b03831681523360208201527f6696222bb476e2b08ac3bf59d60b85b81ae8327ff2cf3efe73a02b7bf71c618c9101610851565b6000610c45836001600160a01b038416610eb3565b9392505050565b6000610c5782610fa6565b610c6357506000919050565b600a5460405163ed882c2b60e01b815260048101919091526001600160a01b0383169063ed882c2b90602401610507565b6000610c45836001600160a01b038416611018565b60606000610c4583611067565b6001600160a01b0381811660008181526008602052604090819020429055600554905163072e008f60e11b8152600481019290925290911690630e5c011e90602401600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b5050505050565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517f7880f0fcc848e1f26e461654b100a69f8d0641e29aa29f6596c6afadbb36b5ea9190a1565b6001600160a01b038116610df15760405162461bcd60e51b815260206004820152603560248201527f676f7665726e61626c652f70656e64696e672d676f7665726e6f722d73686f756044820152746c642d6e6f742d62652d7a65726f2d61646472657360581b6064820152608401610400565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def90602001610851565b6001600160a01b03811660009081526001830160205260408120541515610c45565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261044a9084906110c3565b60008181526001830160205260408120548015610f9c576000610ed76001836115c1565b8554909150600090610eeb906001906115c1565b9050818114610f50576000866000018281548110610f0b57610f0b61152e565b9060005260206000200154905080876000018481548110610f2e57610f2e61152e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610f6157610f616115d8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610557565b6000915050610557565b6000610fb3600683610e3f565b610fd057604051638716f5eb60e01b815260040160405180910390fd5b600954158061100357506009546001600160a01b03831660009081526008602052604090205461100091906115ee565b42115b1561101057506001919050565b506000919050565b600081815260018301602052604081205461105f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610557565b506000610557565b6060816000018054806020026020016040519081016040528092919081815260200182805480156110b757602002820191906000526020600020905b8154815260200190600101908083116110a3575b50505050509050919050565b6000611118826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111959092919063ffffffff16565b80519091501561044a57808060200190518101906111369190611511565b61044a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610400565b60606111a484846000856111ac565b949350505050565b60608247101561120d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610400565b843b61125b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610400565b600080866001600160a01b031685876040516112779190611636565b60006040518083038185875af1925050503d80600081146112b4576040519150601f19603f3d011682016040523d82523d6000602084013e6112b9565b606091505b50915091506112c98282866112d4565b979650505050505050565b606083156112e3575081610c45565b8251156112f35782518084602001fd5b8160405162461bcd60e51b81526004016104009190611652565b801515811461041257600080fd5b60006020828403121561132d57600080fd5b8135610c458161130d565b80356001600160a01b038116811461134f57600080fd5b919050565b60006020828403121561136657600080fd5b610c4582611338565b60008060006060848603121561138457600080fd5b61138d84611338565b925061139b60208501611338565b9150604084013590509250925092565b600080602083850312156113be57600080fd5b823567ffffffffffffffff808211156113d657600080fd5b818501915085601f8301126113ea57600080fd5b8135818111156113f957600080fd5b8660208260051b850101111561140e57600080fd5b60209290920196919550909350505050565b60006020828403121561143257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561147a5783516001600160a01b031683529284019291840191600101611455565b50909695505050505050565b60208082526018908201527f676f7665726e61626c652f6f6e6c792d676f7665726e6f720000000000000000604082015260600190565b60208082526034908201527f4d616368696e6572793a3a6f6e6c79476f7665726e6f724f724d656368616e69604082015273319d34b73b30b634b216b6b9b396b9b2b73232b960611b606082015260800190565b60006020828403121561152357600080fd5b8151610c458161130d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561156e5761156e611544565b5060010190565b60208082528181018390526000908460408401835b868110156115b6576001600160a01b036115a384611338565b168252918301919083019060010161158a565b509695505050505050565b6000828210156115d3576115d3611544565b500390565b634e487b7160e01b600052603160045260246000fd5b6000821982111561160157611601611544565b500190565b60005b83811015611621578181015183820152602001611609565b83811115611630576000848401525b50505050565b60008251611648818460208701611606565b9190910192915050565b6020815260008251806020840152611671816040850160208701611606565b601f01601f1916919091016040019291505056fea26469706673582212207e48bd6f5615f511091fa7d7d95fddaf6aea30f92acc43e2529a95fc432e643564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80639f471303116100de578063e06a7cb911610097578063e43581b811610071578063e43581b814610386578063e58bb639146103a8578063ef47da6d146103b0578063f235757f146103c357600080fd5b8063e06a7cb914610357578063e1c5b39514610360578063e3056a341461037357600080fd5b80639f471303146102c7578063a734f06e146102da578063ad5c4648146102f5578063c0c0b6021461031c578063d9f9027f1461032f578063dd7ba4201461034457600080fd5b806334d6020d1161014b57806365834acc1161012557806365834acc1461027b57806370814eeb1461028e57806374c2ca83146102a157806382376a99146102b457600080fd5b806334d6020d1461023857806336df7ea51461024b5780635c975abb1461025e57600080fd5b806302329a291461019357806304146a39146101a85780630c340a24146101c457806310262803146101ef5780631078f3881461020f5780632db8c12914610225575b600080fd5b6101a66101a136600461131b565b6103d6565b005b6101b1600a5481565b6040519081526020015b60405180910390f35b6000546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020016101bb565b6101b16101fd366004611354565b60086020526000908152604090205481565b60045461010090046001600160a01b03166101d7565b6101a661023336600461136f565b610415565b6005546101d7906001600160a01b031681565b6101a6610259366004611354565b61044f565b60045461026b9060ff1681565b60405190151581526020016101bb565b61026b610289366004611354565b6104cd565b6101a661029c3660046113ab565b61055d565b6101a66102af366004611420565b610640565b6101a66102c2366004611354565b61069b565b61026b6102d5366004611354565b6106e7565b6101d773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101d77f000000000000000000000000000000000000000000000000000000000000000081565b6101a661032a3660046113ab565b6106f2565b6103376107c9565b6040516101bb9190611439565b6101a6610352366004611354565b6107da565b6101b160095481565b6101a661036e366004611420565b61085c565b6001546101d7906001600160a01b031681565b61026b610394366004611354565b6000546001600160a01b0391821691161490565b6101a66108b7565b6101a66103be366004611354565b61091b565b6101a66103d1366004611354565b610968565b6000546001600160a01b031633146104095760405162461bcd60e51b815260040161040090611486565b60405180910390fd5b6104128161099b565b50565b6000546001600160a01b0316331461043f5760405162461bcd60e51b815260040161040090611486565b61044a838383610a21565b505050565b60045460ff161561048b5760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b6044820152606401610400565b6000546001600160a01b03163314806104a857506104a8336104cd565b6104c45760405162461bcd60e51b8152600401610400906114bd565b61041281610bc3565b60048054604051631960d2b360e21b81526001600160a01b0384811693820193909352600092610100909204909116906365834acc906024015b60206040518083038186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190611511565b92915050565b6000546001600160a01b031633148061057a575061057a336104cd565b6105965760405162461bcd60e51b8152600401610400906114bd565b60005b81811015610602576105d38383838181106105b6576105b661152e565b90506020020160208101906105cb9190611354565b600690610c30565b6105f057604051638716f5eb60e01b815260040160405180910390fd5b806105fa8161155a565b915050610599565b507fa52141b1b38605c552bd988329fd94c9f42979f3b8ca555f875962960a6d55a68282604051610634929190611575565b60405180910390a15050565b6000546001600160a01b031633148061065d575061065d336104cd565b6106795760405162461bcd60e51b8152600401610400906114bd565b80610696576040516252b55360e31b815260040160405180910390fd5b600955565b6000546001600160a01b031633146106c55760405162461bcd60e51b815260040161040090611486565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061055782610c4c565b6000546001600160a01b031633148061070f575061070f336104cd565b61072b5760405162461bcd60e51b8152600401610400906114bd565b60005b818110156107975761076883838381811061074b5761074b61152e565b90506020020160208101906107609190611354565b600690610c94565b6107855760405163165e236760e01b815260040160405180910390fd5b8061078f8161155a565b91505061072e565b507fa7e35176a12cd26c4faa0cd1d742d768c473cd6a40fb4a7d377fb8fc9b836ec98282604051610634929190611575565b60606107d56006610ca9565b905090565b6000546001600160a01b03163314806107f757506107f7336104cd565b6108135760405162461bcd60e51b8152600401610400906114bd565b61081c81610cb6565b6040516001600160a01b03821681527fee8d688761ac1d0fda49e2ac999f0e46b3beaf16857a8e8905aeab2987dc8d38906020015b60405180910390a150565b6000546001600160a01b03163314806108795750610879336104cd565b6108955760405162461bcd60e51b8152600401610400906114bd565b806108b2576040516252b55360e31b815260040160405180910390fd5b600a55565b6001546001600160a01b031633146109115760405162461bcd60e51b815260206004820181905260248201527f676f7665726e61626c652f6f6e6c792d70656e64696e672d676f7665726e6f726044820152606401610400565b610919610d2d565b565b6000546001600160a01b031633146109455760405162461bcd60e51b815260040161040090611486565b60048054610100600160a81b0319166101006001600160a01b0384160217905550565b6000546001600160a01b031633146109925760405162461bcd60e51b815260040161040090611486565b61041281610d7d565b60045460ff16151581151514156109e05760405162461bcd60e51b81526020600482015260096024820152686e6f2d6368616e676560b81b6044820152606401610400565b6004805460ff19168215159081179091556040519081527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd290602001610851565b6001600160a01b038316610a8f5760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b6064820152608401610400565b610a9a600283610e3f565b15610afe5760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b6064820152608401610400565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b5f576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610b59573d6000803e3d6000fd5b50610b73565b610b736001600160a01b0383168483610e61565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b610bcc81610c4c565b610be957604051630efd608960e21b815260040160405180910390fd5b610bf281610cb6565b604080516001600160a01b03831681523360208201527f6696222bb476e2b08ac3bf59d60b85b81ae8327ff2cf3efe73a02b7bf71c618c9101610851565b6000610c45836001600160a01b038416610eb3565b9392505050565b6000610c5782610fa6565b610c6357506000919050565b600a5460405163ed882c2b60e01b815260048101919091526001600160a01b0383169063ed882c2b90602401610507565b6000610c45836001600160a01b038416611018565b60606000610c4583611067565b6001600160a01b0381811660008181526008602052604090819020429055600554905163072e008f60e11b8152600481019290925290911690630e5c011e90602401600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b5050505050565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517f7880f0fcc848e1f26e461654b100a69f8d0641e29aa29f6596c6afadbb36b5ea9190a1565b6001600160a01b038116610df15760405162461bcd60e51b815260206004820152603560248201527f676f7665726e61626c652f70656e64696e672d676f7665726e6f722d73686f756044820152746c642d6e6f742d62652d7a65726f2d61646472657360581b6064820152608401610400565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def90602001610851565b6001600160a01b03811660009081526001830160205260408120541515610c45565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261044a9084906110c3565b60008181526001830160205260408120548015610f9c576000610ed76001836115c1565b8554909150600090610eeb906001906115c1565b9050818114610f50576000866000018281548110610f0b57610f0b61152e565b9060005260206000200154905080876000018481548110610f2e57610f2e61152e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610f6157610f616115d8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610557565b6000915050610557565b6000610fb3600683610e3f565b610fd057604051638716f5eb60e01b815260040160405180910390fd5b600954158061100357506009546001600160a01b03831660009081526008602052604090205461100091906115ee565b42115b1561101057506001919050565b506000919050565b600081815260018301602052604081205461105f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610557565b506000610557565b6060816000018054806020026020016040519081016040528092919081815260200182805480156110b757602002820191906000526020600020905b8154815260200190600101908083116110a3575b50505050509050919050565b6000611118826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111959092919063ffffffff16565b80519091501561044a57808060200190518101906111369190611511565b61044a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610400565b60606111a484846000856111ac565b949350505050565b60608247101561120d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610400565b843b61125b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610400565b600080866001600160a01b031685876040516112779190611636565b60006040518083038185875af1925050503d80600081146112b4576040519150601f19603f3d011682016040523d82523d6000602084013e6112b9565b606091505b50915091506112c98282866112d4565b979650505050505050565b606083156112e3575081610c45565b8251156112f35782518084602001fd5b8160405162461bcd60e51b81526004016104009190611652565b801515811461041257600080fd5b60006020828403121561132d57600080fd5b8135610c458161130d565b80356001600160a01b038116811461134f57600080fd5b919050565b60006020828403121561136657600080fd5b610c4582611338565b60008060006060848603121561138457600080fd5b61138d84611338565b925061139b60208501611338565b9150604084013590509250925092565b600080602083850312156113be57600080fd5b823567ffffffffffffffff808211156113d657600080fd5b818501915085601f8301126113ea57600080fd5b8135818111156113f957600080fd5b8660208260051b850101111561140e57600080fd5b60209290920196919550909350505050565b60006020828403121561143257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561147a5783516001600160a01b031683529284019291840191600101611455565b50909695505050505050565b60208082526018908201527f676f7665726e61626c652f6f6e6c792d676f7665726e6f720000000000000000604082015260600190565b60208082526034908201527f4d616368696e6572793a3a6f6e6c79476f7665726e6f724f724d656368616e69604082015273319d34b73b30b634b216b6b9b396b9b2b73232b960611b606082015260800190565b60006020828403121561152357600080fd5b8151610c458161130d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561156e5761156e611544565b5060010190565b60208082528181018390526000908460408401835b868110156115b6576001600160a01b036115a384611338565b168252918301919083019060010161158a565b509695505050505050565b6000828210156115d3576115d3611544565b500390565b634e487b7160e01b600052603160045260246000fd5b6000821982111561160157611601611544565b500190565b60005b83811015611621578181015183820152602001611609565b83811115611630576000848401525b50505050565b60008251611648818460208701611606565b9190910192915050565b6020815260008251806020840152611671816040850160208701611606565b601f01601f1916919091016040019291505056fea26469706673582212207e48bd6f5615f511091fa7d7d95fddaf6aea30f92acc43e2529a95fc432e643564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2874,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2877,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2763,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "protocolTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)1503_storage"
      },
      {
        "astId": 3205,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3014,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "_mechanicsRegistry",
        "offset": 1,
        "slot": "4",
        "type": "t_contract(IMechanicsRegistry)2326"
      },
      {
        "astId": 5113,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "V2Keeper",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IV2Keeper)3966"
      },
      {
        "astId": 5116,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "_availableStrategies",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)1503_storage"
      },
      {
        "astId": 5121,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "lastWorkAt",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5124,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "workCooldown",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5127,
        "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
        "label": "callCost",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMechanicsRegistry)2326": {
        "encoding": "inplace",
        "label": "contract IMechanicsRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IV2Keeper)3966": {
        "encoding": "inplace",
        "label": "contract IV2Keeper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1503_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1502,
            "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1202_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1202_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1197,
            "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1201,
            "contract": "contracts/jobs/detached-gasless/HarvestV2DetachedGaslessJob.sol:HarvestV2DetachedGaslessJob",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}